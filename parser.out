Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DICT
    ILA_IFX
    KEY
    UMINUS

Grammar

Rule 0     S' -> program
Rule 1     program -> external_list
Rule 2     external_list -> external external_list
Rule 3     external_list -> empty
Rule 4     external -> function_def
Rule 5     external -> statement
Rule 6     external -> class_def
Rule 7     function_def -> TYPE ID LPAREN param_list RPAREN compound
Rule 8     param_list -> param_list_nonempty
Rule 9     param_list -> empty
Rule 10    param_list_nonempty -> TYPE ID
Rule 11    param_list_nonempty -> TYPE ID COMMA param_list_nonempty
Rule 12    func_call -> ID LPAREN arg_list RPAREN
Rule 13    arg_list -> arg_list_nonempty
Rule 14    arg_list -> empty
Rule 15    arg_list_nonempty -> expression
Rule 16    arg_list_nonempty -> expression COMMA arg_list_nonempty
Rule 17    compound -> LBRACE stmt_list RBRACE
Rule 18    stmt_list -> statement stmt_list
Rule 19    stmt_list -> empty
Rule 20    statement -> declaration_stmt
Rule 21    statement -> expression_stmt
Rule 22    statement -> if_stmt
Rule 23    statement -> while_stmt
Rule 24    statement -> for_stmt
Rule 25    statement -> return_stmt
Rule 26    statement -> break_stmt
Rule 27    statement -> continue_stmt
Rule 28    statement -> compound
Rule 29    statement -> try_stmt
Rule 30    statement -> throw_stmt
Rule 31    declaration_stmt -> TYPE ID SEMI
Rule 32    declaration_stmt -> TYPE ID ASSIGN expression SEMI
Rule 33    declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI
Rule 34    expression_stmt -> expression SEMI
Rule 35    expression_stmt -> func_call SEMI
Rule 36    expression -> assignment
Rule 37    expression -> binary_expr
Rule 38    assignment -> ID ASSIGN expression
Rule 39    assignment -> ID LBRACKET expression RBRACKET ASSIGN expression
Rule 40    binary_expr -> binary_expr PLUS binary_expr
Rule 41    binary_expr -> binary_expr MINUS binary_expr
Rule 42    binary_expr -> binary_expr TIMES binary_expr
Rule 43    binary_expr -> binary_expr DIVIDE binary_expr
Rule 44    binary_expr -> binary_expr OU binary_expr
Rule 45    binary_expr -> binary_expr AWLA_LOGICAL binary_expr
Rule 46    binary_expr -> binary_expr LT binary_expr
Rule 47    binary_expr -> binary_expr LE binary_expr
Rule 48    binary_expr -> binary_expr GT binary_expr
Rule 49    binary_expr -> binary_expr GE binary_expr
Rule 50    binary_expr -> binary_expr EQ binary_expr
Rule 51    binary_expr -> binary_expr NE binary_expr
Rule 52    binary_expr -> MINUS binary_expr
Rule 53    binary_expr -> MACHI binary_expr
Rule 54    binary_expr -> LPAREN expression RPAREN
Rule 55    binary_expr -> NUMBER
Rule 56    binary_expr -> STRING
Rule 57    binary_expr -> BOOL
Rule 58    binary_expr -> NULL
Rule 59    binary_expr -> ID
Rule 60    binary_expr -> func_call
Rule 61    if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement
Rule 62    if_stmt -> ILA LPAREN expression RPAREN statement
Rule 63    while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement
Rule 64    for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
Rule 65    opt_expr -> expression
Rule 66    opt_expr -> empty
Rule 67    break_stmt -> HRASS SEMI
Rule 68    continue_stmt -> KML SEMI
Rule 69    return_stmt -> RJ3 opt_expr SEMI
Rule 70    binary_expr -> LBRACKET arg_list RBRACKET
Rule 71    binary_expr -> binary_expr LBRACKET expression RBRACKET
Rule 72    binary_expr -> LBRACE dict_items RBRACE
Rule 73    dict_items -> dict_item_list
Rule 74    dict_items -> empty
Rule 75    dict_item_list -> dict_item
Rule 76    dict_item_list -> dict_item COMMA dict_item_list
Rule 77    dict_item -> expression COLON expression
Rule 78    class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE
Rule 79    class_inheritance -> EXTENDS ID
Rule 80    class_inheritance -> empty
Rule 81    class_body -> class_member class_body
Rule 82    class_body -> empty
Rule 83    class_member -> property_decl
Rule 84    class_member -> method_decl
Rule 85    property_decl -> access_modifier TYPE ID SEMI
Rule 86    property_decl -> access_modifier TYPE ID ASSIGN expression SEMI
Rule 87    method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN compound
Rule 88    access_modifier -> PUBLIC
Rule 89    access_modifier -> PRIVATE
Rule 90    access_modifier -> empty
Rule 91    binary_expr -> binary_expr DOT ID
Rule 92    binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN
Rule 93    try_stmt -> TRY compound catch_clauses
Rule 94    catch_clauses -> catch_clause catch_clauses
Rule 95    catch_clauses -> catch_clause
Rule 96    catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound
Rule 97    throw_stmt -> THROW expression SEMI
Rule 98    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 32 38 39 86
AWLA                 : 61
AWLA_LOGICAL         : 45
BOOL                 : 57
CATCH                : 96
CLASS                : 78
COLON                : 77
COMMA                : 11 16 76
DICT                 : 
DIVIDE               : 43
DOT                  : 91 92
EQ                   : 50
EXCEPTION            : 96
EXTENDS              : 79
GE                   : 49
GT                   : 48
HRASS                : 67
ID                   : 7 10 11 12 31 32 33 38 39 59 78 79 85 86 87 91 92 96
ILA                  : 61 62
ILA_IFX              : 
KEY                  : 
KML                  : 68
KOULLA               : 64
LBRACE               : 17 72 78
LBRACKET             : 33 39 70 71
LE                   : 47
LPAREN               : 7 12 54 61 62 63 64 87 92 96
LT                   : 46
MACHI                : 53
MINUS                : 41 52
MNINTCHOUF           : 63
NE                   : 51
NULL                 : 58
NUMBER               : 33 55
OU                   : 44
PLUS                 : 40
PRIVATE              : 89
PUBLIC               : 88
RBRACE               : 17 72 78
RBRACKET             : 33 39 70 71
RJ3                  : 69
RPAREN               : 7 12 54 61 62 63 64 87 92 96
SEMI                 : 31 32 33 34 35 64 64 67 68 69 85 86 97
STRING               : 56
THROW                : 97
TIMES                : 42
TRY                  : 93
TYPE                 : 7 10 11 31 32 33 85 86 87
UMINUS               : 
error                : 

Nonterminals, with rules where they appear

access_modifier      : 85 86 87
arg_list             : 12 70 92
arg_list_nonempty    : 13 16
assignment           : 36
binary_expr          : 37 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 53 71 91 92
break_stmt           : 26
catch_clause         : 94 95
catch_clauses        : 93 94
class_body           : 78 81
class_def            : 6
class_inheritance    : 78
class_member         : 81
compound             : 7 28 87 93 96
continue_stmt        : 27
declaration_stmt     : 20
dict_item            : 75 76
dict_item_list       : 73 76
dict_items           : 72
empty                : 3 9 14 19 66 74 80 82 90
expression           : 15 16 32 34 38 39 39 54 61 62 63 64 64 64 65 71 77 77 86 97
expression_stmt      : 21
external             : 2
external_list        : 1 2
for_stmt             : 24
func_call            : 35 60
function_def         : 4
if_stmt              : 22
method_decl          : 84
opt_expr             : 69
param_list           : 7 87
param_list_nonempty  : 8 11
program              : 0
property_decl        : 83
return_stmt          : 25
statement            : 5 18 61 61 62 63 64
stmt_list            : 17 18
throw_stmt           : 30
try_stmt             : 29
while_stmt           : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . external_list
    (2) external_list -> . external external_list
    (3) external_list -> . empty
    (4) external -> . function_def
    (5) external -> . statement
    (6) external -> . class_def
    (98) empty -> .
    (7) function_def -> . TYPE ID LPAREN param_list RPAREN compound
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (78) class_def -> . CLASS ID class_inheritance LBRACE class_body RBRACE
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    $end            reduce using rule 98 (empty -> .)
    TYPE            shift and go to state 8
    CLASS           shift and go to state 22
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    program                        shift and go to state 1
    external_list                  shift and go to state 2
    external                       shift and go to state 3
    empty                          shift and go to state 4
    function_def                   shift and go to state 5
    statement                      shift and go to state 6
    class_def                      shift and go to state 7
    compound                       shift and go to state 11
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    expression                     shift and go to state 24
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 1

    (0) S' -> program .



state 2

    (1) program -> external_list .

    $end            reduce using rule 1 (program -> external_list .)


state 3

    (2) external_list -> external . external_list
    (2) external_list -> . external external_list
    (3) external_list -> . empty
    (4) external -> . function_def
    (5) external -> . statement
    (6) external -> . class_def
    (98) empty -> .
    (7) function_def -> . TYPE ID LPAREN param_list RPAREN compound
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (78) class_def -> . CLASS ID class_inheritance LBRACE class_body RBRACE
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    $end            reduce using rule 98 (empty -> .)
    TYPE            shift and go to state 8
    CLASS           shift and go to state 22
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    external                       shift and go to state 3
    external_list                  shift and go to state 43
    empty                          shift and go to state 4
    function_def                   shift and go to state 5
    statement                      shift and go to state 6
    class_def                      shift and go to state 7
    compound                       shift and go to state 11
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    expression                     shift and go to state 24
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 4

    (3) external_list -> empty .

    $end            reduce using rule 3 (external_list -> empty .)


state 5

    (4) external -> function_def .

    TYPE            reduce using rule 4 (external -> function_def .)
    CLASS           reduce using rule 4 (external -> function_def .)
    ILA             reduce using rule 4 (external -> function_def .)
    MNINTCHOUF      reduce using rule 4 (external -> function_def .)
    KOULLA          reduce using rule 4 (external -> function_def .)
    RJ3             reduce using rule 4 (external -> function_def .)
    HRASS           reduce using rule 4 (external -> function_def .)
    KML             reduce using rule 4 (external -> function_def .)
    LBRACE          reduce using rule 4 (external -> function_def .)
    TRY             reduce using rule 4 (external -> function_def .)
    THROW           reduce using rule 4 (external -> function_def .)
    ID              reduce using rule 4 (external -> function_def .)
    MINUS           reduce using rule 4 (external -> function_def .)
    MACHI           reduce using rule 4 (external -> function_def .)
    LPAREN          reduce using rule 4 (external -> function_def .)
    NUMBER          reduce using rule 4 (external -> function_def .)
    STRING          reduce using rule 4 (external -> function_def .)
    BOOL            reduce using rule 4 (external -> function_def .)
    NULL            reduce using rule 4 (external -> function_def .)
    LBRACKET        reduce using rule 4 (external -> function_def .)
    $end            reduce using rule 4 (external -> function_def .)


state 6

    (5) external -> statement .

    TYPE            reduce using rule 5 (external -> statement .)
    CLASS           reduce using rule 5 (external -> statement .)
    ILA             reduce using rule 5 (external -> statement .)
    MNINTCHOUF      reduce using rule 5 (external -> statement .)
    KOULLA          reduce using rule 5 (external -> statement .)
    RJ3             reduce using rule 5 (external -> statement .)
    HRASS           reduce using rule 5 (external -> statement .)
    KML             reduce using rule 5 (external -> statement .)
    LBRACE          reduce using rule 5 (external -> statement .)
    TRY             reduce using rule 5 (external -> statement .)
    THROW           reduce using rule 5 (external -> statement .)
    ID              reduce using rule 5 (external -> statement .)
    MINUS           reduce using rule 5 (external -> statement .)
    MACHI           reduce using rule 5 (external -> statement .)
    LPAREN          reduce using rule 5 (external -> statement .)
    NUMBER          reduce using rule 5 (external -> statement .)
    STRING          reduce using rule 5 (external -> statement .)
    BOOL            reduce using rule 5 (external -> statement .)
    NULL            reduce using rule 5 (external -> statement .)
    LBRACKET        reduce using rule 5 (external -> statement .)
    $end            reduce using rule 5 (external -> statement .)


state 7

    (6) external -> class_def .

    TYPE            reduce using rule 6 (external -> class_def .)
    CLASS           reduce using rule 6 (external -> class_def .)
    ILA             reduce using rule 6 (external -> class_def .)
    MNINTCHOUF      reduce using rule 6 (external -> class_def .)
    KOULLA          reduce using rule 6 (external -> class_def .)
    RJ3             reduce using rule 6 (external -> class_def .)
    HRASS           reduce using rule 6 (external -> class_def .)
    KML             reduce using rule 6 (external -> class_def .)
    LBRACE          reduce using rule 6 (external -> class_def .)
    TRY             reduce using rule 6 (external -> class_def .)
    THROW           reduce using rule 6 (external -> class_def .)
    ID              reduce using rule 6 (external -> class_def .)
    MINUS           reduce using rule 6 (external -> class_def .)
    MACHI           reduce using rule 6 (external -> class_def .)
    LPAREN          reduce using rule 6 (external -> class_def .)
    NUMBER          reduce using rule 6 (external -> class_def .)
    STRING          reduce using rule 6 (external -> class_def .)
    BOOL            reduce using rule 6 (external -> class_def .)
    NULL            reduce using rule 6 (external -> class_def .)
    LBRACKET        reduce using rule 6 (external -> class_def .)
    $end            reduce using rule 6 (external -> class_def .)


state 8

    (7) function_def -> TYPE . ID LPAREN param_list RPAREN compound
    (31) declaration_stmt -> TYPE . ID SEMI
    (32) declaration_stmt -> TYPE . ID ASSIGN expression SEMI
    (33) declaration_stmt -> TYPE . ID LBRACKET NUMBER RBRACKET SEMI

    ID              shift and go to state 44


state 9

    (12) func_call -> ID . LPAREN arg_list RPAREN
    (38) assignment -> ID . ASSIGN expression
    (39) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (59) binary_expr -> ID .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 45
    ASSIGN          shift and go to state 46
    LBRACKET        shift and go to state 47
    PLUS            reduce using rule 59 (binary_expr -> ID .)
    MINUS           reduce using rule 59 (binary_expr -> ID .)
    TIMES           reduce using rule 59 (binary_expr -> ID .)
    DIVIDE          reduce using rule 59 (binary_expr -> ID .)
    OU              reduce using rule 59 (binary_expr -> ID .)
    AWLA_LOGICAL    reduce using rule 59 (binary_expr -> ID .)
    LT              reduce using rule 59 (binary_expr -> ID .)
    LE              reduce using rule 59 (binary_expr -> ID .)
    GT              reduce using rule 59 (binary_expr -> ID .)
    GE              reduce using rule 59 (binary_expr -> ID .)
    EQ              reduce using rule 59 (binary_expr -> ID .)
    NE              reduce using rule 59 (binary_expr -> ID .)
    DOT             reduce using rule 59 (binary_expr -> ID .)
    SEMI            reduce using rule 59 (binary_expr -> ID .)
    COLON           reduce using rule 59 (binary_expr -> ID .)

  ! LBRACKET        [ reduce using rule 59 (binary_expr -> ID .) ]


state 10

    (54) binary_expr -> LPAREN . expression RPAREN
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 48
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 11

    (28) statement -> compound .

    TYPE            reduce using rule 28 (statement -> compound .)
    CLASS           reduce using rule 28 (statement -> compound .)
    ILA             reduce using rule 28 (statement -> compound .)
    MNINTCHOUF      reduce using rule 28 (statement -> compound .)
    KOULLA          reduce using rule 28 (statement -> compound .)
    RJ3             reduce using rule 28 (statement -> compound .)
    HRASS           reduce using rule 28 (statement -> compound .)
    KML             reduce using rule 28 (statement -> compound .)
    LBRACE          reduce using rule 28 (statement -> compound .)
    TRY             reduce using rule 28 (statement -> compound .)
    THROW           reduce using rule 28 (statement -> compound .)
    ID              reduce using rule 28 (statement -> compound .)
    MINUS           reduce using rule 28 (statement -> compound .)
    MACHI           reduce using rule 28 (statement -> compound .)
    LPAREN          reduce using rule 28 (statement -> compound .)
    NUMBER          reduce using rule 28 (statement -> compound .)
    STRING          reduce using rule 28 (statement -> compound .)
    BOOL            reduce using rule 28 (statement -> compound .)
    NULL            reduce using rule 28 (statement -> compound .)
    LBRACKET        reduce using rule 28 (statement -> compound .)
    $end            reduce using rule 28 (statement -> compound .)
    RBRACE          reduce using rule 28 (statement -> compound .)
    AWLA            reduce using rule 28 (statement -> compound .)


state 12

    (20) statement -> declaration_stmt .

    TYPE            reduce using rule 20 (statement -> declaration_stmt .)
    CLASS           reduce using rule 20 (statement -> declaration_stmt .)
    ILA             reduce using rule 20 (statement -> declaration_stmt .)
    MNINTCHOUF      reduce using rule 20 (statement -> declaration_stmt .)
    KOULLA          reduce using rule 20 (statement -> declaration_stmt .)
    RJ3             reduce using rule 20 (statement -> declaration_stmt .)
    HRASS           reduce using rule 20 (statement -> declaration_stmt .)
    KML             reduce using rule 20 (statement -> declaration_stmt .)
    LBRACE          reduce using rule 20 (statement -> declaration_stmt .)
    TRY             reduce using rule 20 (statement -> declaration_stmt .)
    THROW           reduce using rule 20 (statement -> declaration_stmt .)
    ID              reduce using rule 20 (statement -> declaration_stmt .)
    MINUS           reduce using rule 20 (statement -> declaration_stmt .)
    MACHI           reduce using rule 20 (statement -> declaration_stmt .)
    LPAREN          reduce using rule 20 (statement -> declaration_stmt .)
    NUMBER          reduce using rule 20 (statement -> declaration_stmt .)
    STRING          reduce using rule 20 (statement -> declaration_stmt .)
    BOOL            reduce using rule 20 (statement -> declaration_stmt .)
    NULL            reduce using rule 20 (statement -> declaration_stmt .)
    LBRACKET        reduce using rule 20 (statement -> declaration_stmt .)
    $end            reduce using rule 20 (statement -> declaration_stmt .)
    RBRACE          reduce using rule 20 (statement -> declaration_stmt .)
    AWLA            reduce using rule 20 (statement -> declaration_stmt .)


state 13

    (21) statement -> expression_stmt .

    TYPE            reduce using rule 21 (statement -> expression_stmt .)
    CLASS           reduce using rule 21 (statement -> expression_stmt .)
    ILA             reduce using rule 21 (statement -> expression_stmt .)
    MNINTCHOUF      reduce using rule 21 (statement -> expression_stmt .)
    KOULLA          reduce using rule 21 (statement -> expression_stmt .)
    RJ3             reduce using rule 21 (statement -> expression_stmt .)
    HRASS           reduce using rule 21 (statement -> expression_stmt .)
    KML             reduce using rule 21 (statement -> expression_stmt .)
    LBRACE          reduce using rule 21 (statement -> expression_stmt .)
    TRY             reduce using rule 21 (statement -> expression_stmt .)
    THROW           reduce using rule 21 (statement -> expression_stmt .)
    ID              reduce using rule 21 (statement -> expression_stmt .)
    MINUS           reduce using rule 21 (statement -> expression_stmt .)
    MACHI           reduce using rule 21 (statement -> expression_stmt .)
    LPAREN          reduce using rule 21 (statement -> expression_stmt .)
    NUMBER          reduce using rule 21 (statement -> expression_stmt .)
    STRING          reduce using rule 21 (statement -> expression_stmt .)
    BOOL            reduce using rule 21 (statement -> expression_stmt .)
    NULL            reduce using rule 21 (statement -> expression_stmt .)
    LBRACKET        reduce using rule 21 (statement -> expression_stmt .)
    $end            reduce using rule 21 (statement -> expression_stmt .)
    RBRACE          reduce using rule 21 (statement -> expression_stmt .)
    AWLA            reduce using rule 21 (statement -> expression_stmt .)


state 14

    (22) statement -> if_stmt .

    TYPE            reduce using rule 22 (statement -> if_stmt .)
    CLASS           reduce using rule 22 (statement -> if_stmt .)
    ILA             reduce using rule 22 (statement -> if_stmt .)
    MNINTCHOUF      reduce using rule 22 (statement -> if_stmt .)
    KOULLA          reduce using rule 22 (statement -> if_stmt .)
    RJ3             reduce using rule 22 (statement -> if_stmt .)
    HRASS           reduce using rule 22 (statement -> if_stmt .)
    KML             reduce using rule 22 (statement -> if_stmt .)
    LBRACE          reduce using rule 22 (statement -> if_stmt .)
    TRY             reduce using rule 22 (statement -> if_stmt .)
    THROW           reduce using rule 22 (statement -> if_stmt .)
    ID              reduce using rule 22 (statement -> if_stmt .)
    MINUS           reduce using rule 22 (statement -> if_stmt .)
    MACHI           reduce using rule 22 (statement -> if_stmt .)
    LPAREN          reduce using rule 22 (statement -> if_stmt .)
    NUMBER          reduce using rule 22 (statement -> if_stmt .)
    STRING          reduce using rule 22 (statement -> if_stmt .)
    BOOL            reduce using rule 22 (statement -> if_stmt .)
    NULL            reduce using rule 22 (statement -> if_stmt .)
    LBRACKET        reduce using rule 22 (statement -> if_stmt .)
    $end            reduce using rule 22 (statement -> if_stmt .)
    RBRACE          reduce using rule 22 (statement -> if_stmt .)
    AWLA            reduce using rule 22 (statement -> if_stmt .)


state 15

    (23) statement -> while_stmt .

    TYPE            reduce using rule 23 (statement -> while_stmt .)
    CLASS           reduce using rule 23 (statement -> while_stmt .)
    ILA             reduce using rule 23 (statement -> while_stmt .)
    MNINTCHOUF      reduce using rule 23 (statement -> while_stmt .)
    KOULLA          reduce using rule 23 (statement -> while_stmt .)
    RJ3             reduce using rule 23 (statement -> while_stmt .)
    HRASS           reduce using rule 23 (statement -> while_stmt .)
    KML             reduce using rule 23 (statement -> while_stmt .)
    LBRACE          reduce using rule 23 (statement -> while_stmt .)
    TRY             reduce using rule 23 (statement -> while_stmt .)
    THROW           reduce using rule 23 (statement -> while_stmt .)
    ID              reduce using rule 23 (statement -> while_stmt .)
    MINUS           reduce using rule 23 (statement -> while_stmt .)
    MACHI           reduce using rule 23 (statement -> while_stmt .)
    LPAREN          reduce using rule 23 (statement -> while_stmt .)
    NUMBER          reduce using rule 23 (statement -> while_stmt .)
    STRING          reduce using rule 23 (statement -> while_stmt .)
    BOOL            reduce using rule 23 (statement -> while_stmt .)
    NULL            reduce using rule 23 (statement -> while_stmt .)
    LBRACKET        reduce using rule 23 (statement -> while_stmt .)
    $end            reduce using rule 23 (statement -> while_stmt .)
    RBRACE          reduce using rule 23 (statement -> while_stmt .)
    AWLA            reduce using rule 23 (statement -> while_stmt .)


state 16

    (24) statement -> for_stmt .

    TYPE            reduce using rule 24 (statement -> for_stmt .)
    CLASS           reduce using rule 24 (statement -> for_stmt .)
    ILA             reduce using rule 24 (statement -> for_stmt .)
    MNINTCHOUF      reduce using rule 24 (statement -> for_stmt .)
    KOULLA          reduce using rule 24 (statement -> for_stmt .)
    RJ3             reduce using rule 24 (statement -> for_stmt .)
    HRASS           reduce using rule 24 (statement -> for_stmt .)
    KML             reduce using rule 24 (statement -> for_stmt .)
    LBRACE          reduce using rule 24 (statement -> for_stmt .)
    TRY             reduce using rule 24 (statement -> for_stmt .)
    THROW           reduce using rule 24 (statement -> for_stmt .)
    ID              reduce using rule 24 (statement -> for_stmt .)
    MINUS           reduce using rule 24 (statement -> for_stmt .)
    MACHI           reduce using rule 24 (statement -> for_stmt .)
    LPAREN          reduce using rule 24 (statement -> for_stmt .)
    NUMBER          reduce using rule 24 (statement -> for_stmt .)
    STRING          reduce using rule 24 (statement -> for_stmt .)
    BOOL            reduce using rule 24 (statement -> for_stmt .)
    NULL            reduce using rule 24 (statement -> for_stmt .)
    LBRACKET        reduce using rule 24 (statement -> for_stmt .)
    $end            reduce using rule 24 (statement -> for_stmt .)
    RBRACE          reduce using rule 24 (statement -> for_stmt .)
    AWLA            reduce using rule 24 (statement -> for_stmt .)


state 17

    (25) statement -> return_stmt .

    TYPE            reduce using rule 25 (statement -> return_stmt .)
    CLASS           reduce using rule 25 (statement -> return_stmt .)
    ILA             reduce using rule 25 (statement -> return_stmt .)
    MNINTCHOUF      reduce using rule 25 (statement -> return_stmt .)
    KOULLA          reduce using rule 25 (statement -> return_stmt .)
    RJ3             reduce using rule 25 (statement -> return_stmt .)
    HRASS           reduce using rule 25 (statement -> return_stmt .)
    KML             reduce using rule 25 (statement -> return_stmt .)
    LBRACE          reduce using rule 25 (statement -> return_stmt .)
    TRY             reduce using rule 25 (statement -> return_stmt .)
    THROW           reduce using rule 25 (statement -> return_stmt .)
    ID              reduce using rule 25 (statement -> return_stmt .)
    MINUS           reduce using rule 25 (statement -> return_stmt .)
    MACHI           reduce using rule 25 (statement -> return_stmt .)
    LPAREN          reduce using rule 25 (statement -> return_stmt .)
    NUMBER          reduce using rule 25 (statement -> return_stmt .)
    STRING          reduce using rule 25 (statement -> return_stmt .)
    BOOL            reduce using rule 25 (statement -> return_stmt .)
    NULL            reduce using rule 25 (statement -> return_stmt .)
    LBRACKET        reduce using rule 25 (statement -> return_stmt .)
    $end            reduce using rule 25 (statement -> return_stmt .)
    RBRACE          reduce using rule 25 (statement -> return_stmt .)
    AWLA            reduce using rule 25 (statement -> return_stmt .)


state 18

    (26) statement -> break_stmt .

    TYPE            reduce using rule 26 (statement -> break_stmt .)
    CLASS           reduce using rule 26 (statement -> break_stmt .)
    ILA             reduce using rule 26 (statement -> break_stmt .)
    MNINTCHOUF      reduce using rule 26 (statement -> break_stmt .)
    KOULLA          reduce using rule 26 (statement -> break_stmt .)
    RJ3             reduce using rule 26 (statement -> break_stmt .)
    HRASS           reduce using rule 26 (statement -> break_stmt .)
    KML             reduce using rule 26 (statement -> break_stmt .)
    LBRACE          reduce using rule 26 (statement -> break_stmt .)
    TRY             reduce using rule 26 (statement -> break_stmt .)
    THROW           reduce using rule 26 (statement -> break_stmt .)
    ID              reduce using rule 26 (statement -> break_stmt .)
    MINUS           reduce using rule 26 (statement -> break_stmt .)
    MACHI           reduce using rule 26 (statement -> break_stmt .)
    LPAREN          reduce using rule 26 (statement -> break_stmt .)
    NUMBER          reduce using rule 26 (statement -> break_stmt .)
    STRING          reduce using rule 26 (statement -> break_stmt .)
    BOOL            reduce using rule 26 (statement -> break_stmt .)
    NULL            reduce using rule 26 (statement -> break_stmt .)
    LBRACKET        reduce using rule 26 (statement -> break_stmt .)
    $end            reduce using rule 26 (statement -> break_stmt .)
    RBRACE          reduce using rule 26 (statement -> break_stmt .)
    AWLA            reduce using rule 26 (statement -> break_stmt .)


state 19

    (27) statement -> continue_stmt .

    TYPE            reduce using rule 27 (statement -> continue_stmt .)
    CLASS           reduce using rule 27 (statement -> continue_stmt .)
    ILA             reduce using rule 27 (statement -> continue_stmt .)
    MNINTCHOUF      reduce using rule 27 (statement -> continue_stmt .)
    KOULLA          reduce using rule 27 (statement -> continue_stmt .)
    RJ3             reduce using rule 27 (statement -> continue_stmt .)
    HRASS           reduce using rule 27 (statement -> continue_stmt .)
    KML             reduce using rule 27 (statement -> continue_stmt .)
    LBRACE          reduce using rule 27 (statement -> continue_stmt .)
    TRY             reduce using rule 27 (statement -> continue_stmt .)
    THROW           reduce using rule 27 (statement -> continue_stmt .)
    ID              reduce using rule 27 (statement -> continue_stmt .)
    MINUS           reduce using rule 27 (statement -> continue_stmt .)
    MACHI           reduce using rule 27 (statement -> continue_stmt .)
    LPAREN          reduce using rule 27 (statement -> continue_stmt .)
    NUMBER          reduce using rule 27 (statement -> continue_stmt .)
    STRING          reduce using rule 27 (statement -> continue_stmt .)
    BOOL            reduce using rule 27 (statement -> continue_stmt .)
    NULL            reduce using rule 27 (statement -> continue_stmt .)
    LBRACKET        reduce using rule 27 (statement -> continue_stmt .)
    $end            reduce using rule 27 (statement -> continue_stmt .)
    RBRACE          reduce using rule 27 (statement -> continue_stmt .)
    AWLA            reduce using rule 27 (statement -> continue_stmt .)


state 20

    (29) statement -> try_stmt .

    TYPE            reduce using rule 29 (statement -> try_stmt .)
    CLASS           reduce using rule 29 (statement -> try_stmt .)
    ILA             reduce using rule 29 (statement -> try_stmt .)
    MNINTCHOUF      reduce using rule 29 (statement -> try_stmt .)
    KOULLA          reduce using rule 29 (statement -> try_stmt .)
    RJ3             reduce using rule 29 (statement -> try_stmt .)
    HRASS           reduce using rule 29 (statement -> try_stmt .)
    KML             reduce using rule 29 (statement -> try_stmt .)
    LBRACE          reduce using rule 29 (statement -> try_stmt .)
    TRY             reduce using rule 29 (statement -> try_stmt .)
    THROW           reduce using rule 29 (statement -> try_stmt .)
    ID              reduce using rule 29 (statement -> try_stmt .)
    MINUS           reduce using rule 29 (statement -> try_stmt .)
    MACHI           reduce using rule 29 (statement -> try_stmt .)
    LPAREN          reduce using rule 29 (statement -> try_stmt .)
    NUMBER          reduce using rule 29 (statement -> try_stmt .)
    STRING          reduce using rule 29 (statement -> try_stmt .)
    BOOL            reduce using rule 29 (statement -> try_stmt .)
    NULL            reduce using rule 29 (statement -> try_stmt .)
    LBRACKET        reduce using rule 29 (statement -> try_stmt .)
    $end            reduce using rule 29 (statement -> try_stmt .)
    RBRACE          reduce using rule 29 (statement -> try_stmt .)
    AWLA            reduce using rule 29 (statement -> try_stmt .)


state 21

    (30) statement -> throw_stmt .

    TYPE            reduce using rule 30 (statement -> throw_stmt .)
    CLASS           reduce using rule 30 (statement -> throw_stmt .)
    ILA             reduce using rule 30 (statement -> throw_stmt .)
    MNINTCHOUF      reduce using rule 30 (statement -> throw_stmt .)
    KOULLA          reduce using rule 30 (statement -> throw_stmt .)
    RJ3             reduce using rule 30 (statement -> throw_stmt .)
    HRASS           reduce using rule 30 (statement -> throw_stmt .)
    KML             reduce using rule 30 (statement -> throw_stmt .)
    LBRACE          reduce using rule 30 (statement -> throw_stmt .)
    TRY             reduce using rule 30 (statement -> throw_stmt .)
    THROW           reduce using rule 30 (statement -> throw_stmt .)
    ID              reduce using rule 30 (statement -> throw_stmt .)
    MINUS           reduce using rule 30 (statement -> throw_stmt .)
    MACHI           reduce using rule 30 (statement -> throw_stmt .)
    LPAREN          reduce using rule 30 (statement -> throw_stmt .)
    NUMBER          reduce using rule 30 (statement -> throw_stmt .)
    STRING          reduce using rule 30 (statement -> throw_stmt .)
    BOOL            reduce using rule 30 (statement -> throw_stmt .)
    NULL            reduce using rule 30 (statement -> throw_stmt .)
    LBRACKET        reduce using rule 30 (statement -> throw_stmt .)
    $end            reduce using rule 30 (statement -> throw_stmt .)
    RBRACE          reduce using rule 30 (statement -> throw_stmt .)
    AWLA            reduce using rule 30 (statement -> throw_stmt .)


state 22

    (78) class_def -> CLASS . ID class_inheritance LBRACE class_body RBRACE

    ID              shift and go to state 52


state 23

    (17) compound -> LBRACE . stmt_list RBRACE
    (72) binary_expr -> LBRACE . dict_items RBRACE
    (18) stmt_list -> . statement stmt_list
    (19) stmt_list -> . empty
    (73) dict_items -> . dict_item_list
    (74) dict_items -> . empty
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (98) empty -> .
    (75) dict_item_list -> . dict_item
    (76) dict_item_list -> . dict_item COMMA dict_item_list
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (77) dict_item -> . expression COLON expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    RBRACE          reduce using rule 98 (empty -> .)
    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    stmt_list                      shift and go to state 53
    dict_items                     shift and go to state 54
    statement                      shift and go to state 55
    empty                          shift and go to state 56
    dict_item_list                 shift and go to state 57
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    dict_item                      shift and go to state 58
    expression                     shift and go to state 60
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 24

    (34) expression_stmt -> expression . SEMI

    SEMI            shift and go to state 61


state 25

    (70) binary_expr -> LBRACKET . arg_list RBRACKET
    (13) arg_list -> . arg_list_nonempty
    (14) arg_list -> . empty
    (15) arg_list_nonempty -> . expression
    (16) arg_list_nonempty -> . expression COMMA arg_list_nonempty
    (98) empty -> .
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    RBRACKET        reduce using rule 98 (empty -> .)
    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    arg_list                       shift and go to state 62
    arg_list_nonempty              shift and go to state 63
    empty                          shift and go to state 64
    expression                     shift and go to state 65
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 26

    (55) binary_expr -> NUMBER .

    PLUS            reduce using rule 55 (binary_expr -> NUMBER .)
    MINUS           reduce using rule 55 (binary_expr -> NUMBER .)
    TIMES           reduce using rule 55 (binary_expr -> NUMBER .)
    DIVIDE          reduce using rule 55 (binary_expr -> NUMBER .)
    OU              reduce using rule 55 (binary_expr -> NUMBER .)
    AWLA_LOGICAL    reduce using rule 55 (binary_expr -> NUMBER .)
    LT              reduce using rule 55 (binary_expr -> NUMBER .)
    LE              reduce using rule 55 (binary_expr -> NUMBER .)
    GT              reduce using rule 55 (binary_expr -> NUMBER .)
    GE              reduce using rule 55 (binary_expr -> NUMBER .)
    EQ              reduce using rule 55 (binary_expr -> NUMBER .)
    NE              reduce using rule 55 (binary_expr -> NUMBER .)
    LBRACKET        reduce using rule 55 (binary_expr -> NUMBER .)
    DOT             reduce using rule 55 (binary_expr -> NUMBER .)
    SEMI            reduce using rule 55 (binary_expr -> NUMBER .)
    RPAREN          reduce using rule 55 (binary_expr -> NUMBER .)
    COLON           reduce using rule 55 (binary_expr -> NUMBER .)
    COMMA           reduce using rule 55 (binary_expr -> NUMBER .)
    RBRACKET        reduce using rule 55 (binary_expr -> NUMBER .)
    RBRACE          reduce using rule 55 (binary_expr -> NUMBER .)


state 27

    (35) expression_stmt -> func_call . SEMI
    (60) binary_expr -> func_call .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 66
    PLUS            reduce using rule 60 (binary_expr -> func_call .)
    MINUS           reduce using rule 60 (binary_expr -> func_call .)
    TIMES           reduce using rule 60 (binary_expr -> func_call .)
    DIVIDE          reduce using rule 60 (binary_expr -> func_call .)
    OU              reduce using rule 60 (binary_expr -> func_call .)
    AWLA_LOGICAL    reduce using rule 60 (binary_expr -> func_call .)
    LT              reduce using rule 60 (binary_expr -> func_call .)
    LE              reduce using rule 60 (binary_expr -> func_call .)
    GT              reduce using rule 60 (binary_expr -> func_call .)
    GE              reduce using rule 60 (binary_expr -> func_call .)
    EQ              reduce using rule 60 (binary_expr -> func_call .)
    NE              reduce using rule 60 (binary_expr -> func_call .)
    LBRACKET        reduce using rule 60 (binary_expr -> func_call .)
    DOT             reduce using rule 60 (binary_expr -> func_call .)
    COLON           reduce using rule 60 (binary_expr -> func_call .)

  ! SEMI            [ reduce using rule 60 (binary_expr -> func_call .) ]


state 28

    (61) if_stmt -> ILA . LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> ILA . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 67


state 29

    (63) while_stmt -> MNINTCHOUF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 68


state 30

    (64) for_stmt -> KOULLA . LPAREN expression SEMI expression SEMI expression RPAREN statement

    LPAREN          shift and go to state 69


state 31

    (69) return_stmt -> RJ3 . opt_expr SEMI
    (65) opt_expr -> . expression
    (66) opt_expr -> . empty
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (98) empty -> .
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    SEMI            reduce using rule 98 (empty -> .)
    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    opt_expr                       shift and go to state 70
    expression                     shift and go to state 71
    empty                          shift and go to state 72
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 32

    (67) break_stmt -> HRASS . SEMI

    SEMI            shift and go to state 73


state 33

    (68) continue_stmt -> KML . SEMI

    SEMI            shift and go to state 74


state 34

    (93) try_stmt -> TRY . compound catch_clauses
    (17) compound -> . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 76

    compound                       shift and go to state 75

state 35

    (97) throw_stmt -> THROW . expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 77
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 36

    (36) expression -> assignment .

    SEMI            reduce using rule 36 (expression -> assignment .)
    RPAREN          reduce using rule 36 (expression -> assignment .)
    COLON           reduce using rule 36 (expression -> assignment .)
    COMMA           reduce using rule 36 (expression -> assignment .)
    RBRACKET        reduce using rule 36 (expression -> assignment .)
    RBRACE          reduce using rule 36 (expression -> assignment .)


state 37

    (37) expression -> binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    SEMI            reduce using rule 37 (expression -> binary_expr .)
    RPAREN          reduce using rule 37 (expression -> binary_expr .)
    COLON           reduce using rule 37 (expression -> binary_expr .)
    COMMA           reduce using rule 37 (expression -> binary_expr .)
    RBRACKET        reduce using rule 37 (expression -> binary_expr .)
    RBRACE          reduce using rule 37 (expression -> binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    OU              shift and go to state 82
    AWLA_LOGICAL    shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    LBRACKET        shift and go to state 90
    DOT             shift and go to state 91


state 38

    (52) binary_expr -> MINUS . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 92
    func_call                      shift and go to state 50

state 39

    (53) binary_expr -> MACHI . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 94
    func_call                      shift and go to state 50

state 40

    (56) binary_expr -> STRING .

    PLUS            reduce using rule 56 (binary_expr -> STRING .)
    MINUS           reduce using rule 56 (binary_expr -> STRING .)
    TIMES           reduce using rule 56 (binary_expr -> STRING .)
    DIVIDE          reduce using rule 56 (binary_expr -> STRING .)
    OU              reduce using rule 56 (binary_expr -> STRING .)
    AWLA_LOGICAL    reduce using rule 56 (binary_expr -> STRING .)
    LT              reduce using rule 56 (binary_expr -> STRING .)
    LE              reduce using rule 56 (binary_expr -> STRING .)
    GT              reduce using rule 56 (binary_expr -> STRING .)
    GE              reduce using rule 56 (binary_expr -> STRING .)
    EQ              reduce using rule 56 (binary_expr -> STRING .)
    NE              reduce using rule 56 (binary_expr -> STRING .)
    LBRACKET        reduce using rule 56 (binary_expr -> STRING .)
    DOT             reduce using rule 56 (binary_expr -> STRING .)
    SEMI            reduce using rule 56 (binary_expr -> STRING .)
    RPAREN          reduce using rule 56 (binary_expr -> STRING .)
    COLON           reduce using rule 56 (binary_expr -> STRING .)
    COMMA           reduce using rule 56 (binary_expr -> STRING .)
    RBRACKET        reduce using rule 56 (binary_expr -> STRING .)
    RBRACE          reduce using rule 56 (binary_expr -> STRING .)


state 41

    (57) binary_expr -> BOOL .

    PLUS            reduce using rule 57 (binary_expr -> BOOL .)
    MINUS           reduce using rule 57 (binary_expr -> BOOL .)
    TIMES           reduce using rule 57 (binary_expr -> BOOL .)
    DIVIDE          reduce using rule 57 (binary_expr -> BOOL .)
    OU              reduce using rule 57 (binary_expr -> BOOL .)
    AWLA_LOGICAL    reduce using rule 57 (binary_expr -> BOOL .)
    LT              reduce using rule 57 (binary_expr -> BOOL .)
    LE              reduce using rule 57 (binary_expr -> BOOL .)
    GT              reduce using rule 57 (binary_expr -> BOOL .)
    GE              reduce using rule 57 (binary_expr -> BOOL .)
    EQ              reduce using rule 57 (binary_expr -> BOOL .)
    NE              reduce using rule 57 (binary_expr -> BOOL .)
    LBRACKET        reduce using rule 57 (binary_expr -> BOOL .)
    DOT             reduce using rule 57 (binary_expr -> BOOL .)
    SEMI            reduce using rule 57 (binary_expr -> BOOL .)
    RPAREN          reduce using rule 57 (binary_expr -> BOOL .)
    COLON           reduce using rule 57 (binary_expr -> BOOL .)
    COMMA           reduce using rule 57 (binary_expr -> BOOL .)
    RBRACKET        reduce using rule 57 (binary_expr -> BOOL .)
    RBRACE          reduce using rule 57 (binary_expr -> BOOL .)


state 42

    (58) binary_expr -> NULL .

    PLUS            reduce using rule 58 (binary_expr -> NULL .)
    MINUS           reduce using rule 58 (binary_expr -> NULL .)
    TIMES           reduce using rule 58 (binary_expr -> NULL .)
    DIVIDE          reduce using rule 58 (binary_expr -> NULL .)
    OU              reduce using rule 58 (binary_expr -> NULL .)
    AWLA_LOGICAL    reduce using rule 58 (binary_expr -> NULL .)
    LT              reduce using rule 58 (binary_expr -> NULL .)
    LE              reduce using rule 58 (binary_expr -> NULL .)
    GT              reduce using rule 58 (binary_expr -> NULL .)
    GE              reduce using rule 58 (binary_expr -> NULL .)
    EQ              reduce using rule 58 (binary_expr -> NULL .)
    NE              reduce using rule 58 (binary_expr -> NULL .)
    LBRACKET        reduce using rule 58 (binary_expr -> NULL .)
    DOT             reduce using rule 58 (binary_expr -> NULL .)
    SEMI            reduce using rule 58 (binary_expr -> NULL .)
    RPAREN          reduce using rule 58 (binary_expr -> NULL .)
    COLON           reduce using rule 58 (binary_expr -> NULL .)
    COMMA           reduce using rule 58 (binary_expr -> NULL .)
    RBRACKET        reduce using rule 58 (binary_expr -> NULL .)
    RBRACE          reduce using rule 58 (binary_expr -> NULL .)


state 43

    (2) external_list -> external external_list .

    $end            reduce using rule 2 (external_list -> external external_list .)


state 44

    (7) function_def -> TYPE ID . LPAREN param_list RPAREN compound
    (31) declaration_stmt -> TYPE ID . SEMI
    (32) declaration_stmt -> TYPE ID . ASSIGN expression SEMI
    (33) declaration_stmt -> TYPE ID . LBRACKET NUMBER RBRACKET SEMI

    LPAREN          shift and go to state 95
    SEMI            shift and go to state 96
    ASSIGN          shift and go to state 97
    LBRACKET        shift and go to state 98


state 45

    (12) func_call -> ID LPAREN . arg_list RPAREN
    (13) arg_list -> . arg_list_nonempty
    (14) arg_list -> . empty
    (15) arg_list_nonempty -> . expression
    (16) arg_list_nonempty -> . expression COMMA arg_list_nonempty
    (98) empty -> .
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    RPAREN          reduce using rule 98 (empty -> .)
    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    arg_list                       shift and go to state 99
    arg_list_nonempty              shift and go to state 63
    empty                          shift and go to state 64
    expression                     shift and go to state 65
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 46

    (38) assignment -> ID ASSIGN . expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 100
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 47

    (39) assignment -> ID LBRACKET . expression RBRACKET ASSIGN expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 101
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 48

    (54) binary_expr -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 102


state 49

    (38) assignment -> ID . ASSIGN expression
    (39) assignment -> ID . LBRACKET expression RBRACKET ASSIGN expression
    (59) binary_expr -> ID .
    (12) func_call -> ID . LPAREN arg_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    ASSIGN          shift and go to state 46
    LBRACKET        shift and go to state 47
    PLUS            reduce using rule 59 (binary_expr -> ID .)
    MINUS           reduce using rule 59 (binary_expr -> ID .)
    TIMES           reduce using rule 59 (binary_expr -> ID .)
    DIVIDE          reduce using rule 59 (binary_expr -> ID .)
    OU              reduce using rule 59 (binary_expr -> ID .)
    AWLA_LOGICAL    reduce using rule 59 (binary_expr -> ID .)
    LT              reduce using rule 59 (binary_expr -> ID .)
    LE              reduce using rule 59 (binary_expr -> ID .)
    GT              reduce using rule 59 (binary_expr -> ID .)
    GE              reduce using rule 59 (binary_expr -> ID .)
    EQ              reduce using rule 59 (binary_expr -> ID .)
    NE              reduce using rule 59 (binary_expr -> ID .)
    DOT             reduce using rule 59 (binary_expr -> ID .)
    RPAREN          reduce using rule 59 (binary_expr -> ID .)
    COMMA           reduce using rule 59 (binary_expr -> ID .)
    RBRACKET        reduce using rule 59 (binary_expr -> ID .)
    SEMI            reduce using rule 59 (binary_expr -> ID .)
    COLON           reduce using rule 59 (binary_expr -> ID .)
    RBRACE          reduce using rule 59 (binary_expr -> ID .)
    LPAREN          shift and go to state 45

  ! LBRACKET        [ reduce using rule 59 (binary_expr -> ID .) ]


state 50

    (60) binary_expr -> func_call .

    PLUS            reduce using rule 60 (binary_expr -> func_call .)
    MINUS           reduce using rule 60 (binary_expr -> func_call .)
    TIMES           reduce using rule 60 (binary_expr -> func_call .)
    DIVIDE          reduce using rule 60 (binary_expr -> func_call .)
    OU              reduce using rule 60 (binary_expr -> func_call .)
    AWLA_LOGICAL    reduce using rule 60 (binary_expr -> func_call .)
    LT              reduce using rule 60 (binary_expr -> func_call .)
    LE              reduce using rule 60 (binary_expr -> func_call .)
    GT              reduce using rule 60 (binary_expr -> func_call .)
    GE              reduce using rule 60 (binary_expr -> func_call .)
    EQ              reduce using rule 60 (binary_expr -> func_call .)
    NE              reduce using rule 60 (binary_expr -> func_call .)
    LBRACKET        reduce using rule 60 (binary_expr -> func_call .)
    DOT             reduce using rule 60 (binary_expr -> func_call .)
    RPAREN          reduce using rule 60 (binary_expr -> func_call .)
    COMMA           reduce using rule 60 (binary_expr -> func_call .)
    RBRACKET        reduce using rule 60 (binary_expr -> func_call .)
    SEMI            reduce using rule 60 (binary_expr -> func_call .)
    COLON           reduce using rule 60 (binary_expr -> func_call .)
    RBRACE          reduce using rule 60 (binary_expr -> func_call .)


state 51

    (72) binary_expr -> LBRACE . dict_items RBRACE
    (73) dict_items -> . dict_item_list
    (74) dict_items -> . empty
    (75) dict_item_list -> . dict_item
    (76) dict_item_list -> . dict_item COMMA dict_item_list
    (98) empty -> .
    (77) dict_item -> . expression COLON expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    RBRACE          reduce using rule 98 (empty -> .)
    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    dict_items                     shift and go to state 54
    dict_item_list                 shift and go to state 57
    empty                          shift and go to state 103
    dict_item                      shift and go to state 58
    expression                     shift and go to state 104
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 52

    (78) class_def -> CLASS ID . class_inheritance LBRACE class_body RBRACE
    (79) class_inheritance -> . EXTENDS ID
    (80) class_inheritance -> . empty
    (98) empty -> .

    EXTENDS         shift and go to state 106
    LBRACE          reduce using rule 98 (empty -> .)

    class_inheritance              shift and go to state 105
    empty                          shift and go to state 107

state 53

    (17) compound -> LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 108


state 54

    (72) binary_expr -> LBRACE dict_items . RBRACE

    RBRACE          shift and go to state 109


state 55

    (18) stmt_list -> statement . stmt_list
    (18) stmt_list -> . statement stmt_list
    (19) stmt_list -> . empty
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (98) empty -> .
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    RBRACE          reduce using rule 98 (empty -> .)
    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    statement                      shift and go to state 55
    stmt_list                      shift and go to state 110
    empty                          shift and go to state 111
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    expression                     shift and go to state 24
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 56

    (19) stmt_list -> empty .
    (74) dict_items -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 19 (stmt_list -> empty .)
    RBRACE          reduce using rule 19 (stmt_list -> empty .)

  ! RBRACE          [ reduce using rule 74 (dict_items -> empty .) ]


state 57

    (73) dict_items -> dict_item_list .

    RBRACE          reduce using rule 73 (dict_items -> dict_item_list .)


state 58

    (75) dict_item_list -> dict_item .
    (76) dict_item_list -> dict_item . COMMA dict_item_list

    RBRACE          reduce using rule 75 (dict_item_list -> dict_item .)
    COMMA           shift and go to state 112


state 59

    (31) declaration_stmt -> TYPE . ID SEMI
    (32) declaration_stmt -> TYPE . ID ASSIGN expression SEMI
    (33) declaration_stmt -> TYPE . ID LBRACKET NUMBER RBRACKET SEMI

    ID              shift and go to state 113


state 60

    (34) expression_stmt -> expression . SEMI
    (77) dict_item -> expression . COLON expression

    SEMI            shift and go to state 61
    COLON           shift and go to state 114


state 61

    (34) expression_stmt -> expression SEMI .

    TYPE            reduce using rule 34 (expression_stmt -> expression SEMI .)
    CLASS           reduce using rule 34 (expression_stmt -> expression SEMI .)
    ILA             reduce using rule 34 (expression_stmt -> expression SEMI .)
    MNINTCHOUF      reduce using rule 34 (expression_stmt -> expression SEMI .)
    KOULLA          reduce using rule 34 (expression_stmt -> expression SEMI .)
    RJ3             reduce using rule 34 (expression_stmt -> expression SEMI .)
    HRASS           reduce using rule 34 (expression_stmt -> expression SEMI .)
    KML             reduce using rule 34 (expression_stmt -> expression SEMI .)
    LBRACE          reduce using rule 34 (expression_stmt -> expression SEMI .)
    TRY             reduce using rule 34 (expression_stmt -> expression SEMI .)
    THROW           reduce using rule 34 (expression_stmt -> expression SEMI .)
    ID              reduce using rule 34 (expression_stmt -> expression SEMI .)
    MINUS           reduce using rule 34 (expression_stmt -> expression SEMI .)
    MACHI           reduce using rule 34 (expression_stmt -> expression SEMI .)
    LPAREN          reduce using rule 34 (expression_stmt -> expression SEMI .)
    NUMBER          reduce using rule 34 (expression_stmt -> expression SEMI .)
    STRING          reduce using rule 34 (expression_stmt -> expression SEMI .)
    BOOL            reduce using rule 34 (expression_stmt -> expression SEMI .)
    NULL            reduce using rule 34 (expression_stmt -> expression SEMI .)
    LBRACKET        reduce using rule 34 (expression_stmt -> expression SEMI .)
    $end            reduce using rule 34 (expression_stmt -> expression SEMI .)
    RBRACE          reduce using rule 34 (expression_stmt -> expression SEMI .)
    AWLA            reduce using rule 34 (expression_stmt -> expression SEMI .)


state 62

    (70) binary_expr -> LBRACKET arg_list . RBRACKET

    RBRACKET        shift and go to state 115


state 63

    (13) arg_list -> arg_list_nonempty .

    RBRACKET        reduce using rule 13 (arg_list -> arg_list_nonempty .)
    RPAREN          reduce using rule 13 (arg_list -> arg_list_nonempty .)


state 64

    (14) arg_list -> empty .

    RBRACKET        reduce using rule 14 (arg_list -> empty .)
    RPAREN          reduce using rule 14 (arg_list -> empty .)


state 65

    (15) arg_list_nonempty -> expression .
    (16) arg_list_nonempty -> expression . COMMA arg_list_nonempty

    RBRACKET        reduce using rule 15 (arg_list_nonempty -> expression .)
    RPAREN          reduce using rule 15 (arg_list_nonempty -> expression .)
    COMMA           shift and go to state 116


state 66

    (35) expression_stmt -> func_call SEMI .

    TYPE            reduce using rule 35 (expression_stmt -> func_call SEMI .)
    CLASS           reduce using rule 35 (expression_stmt -> func_call SEMI .)
    ILA             reduce using rule 35 (expression_stmt -> func_call SEMI .)
    MNINTCHOUF      reduce using rule 35 (expression_stmt -> func_call SEMI .)
    KOULLA          reduce using rule 35 (expression_stmt -> func_call SEMI .)
    RJ3             reduce using rule 35 (expression_stmt -> func_call SEMI .)
    HRASS           reduce using rule 35 (expression_stmt -> func_call SEMI .)
    KML             reduce using rule 35 (expression_stmt -> func_call SEMI .)
    LBRACE          reduce using rule 35 (expression_stmt -> func_call SEMI .)
    TRY             reduce using rule 35 (expression_stmt -> func_call SEMI .)
    THROW           reduce using rule 35 (expression_stmt -> func_call SEMI .)
    ID              reduce using rule 35 (expression_stmt -> func_call SEMI .)
    MINUS           reduce using rule 35 (expression_stmt -> func_call SEMI .)
    MACHI           reduce using rule 35 (expression_stmt -> func_call SEMI .)
    LPAREN          reduce using rule 35 (expression_stmt -> func_call SEMI .)
    NUMBER          reduce using rule 35 (expression_stmt -> func_call SEMI .)
    STRING          reduce using rule 35 (expression_stmt -> func_call SEMI .)
    BOOL            reduce using rule 35 (expression_stmt -> func_call SEMI .)
    NULL            reduce using rule 35 (expression_stmt -> func_call SEMI .)
    LBRACKET        reduce using rule 35 (expression_stmt -> func_call SEMI .)
    $end            reduce using rule 35 (expression_stmt -> func_call SEMI .)
    RBRACE          reduce using rule 35 (expression_stmt -> func_call SEMI .)
    AWLA            reduce using rule 35 (expression_stmt -> func_call SEMI .)


state 67

    (61) if_stmt -> ILA LPAREN . expression RPAREN statement AWLA statement
    (62) if_stmt -> ILA LPAREN . expression RPAREN statement
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 117
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 68

    (63) while_stmt -> MNINTCHOUF LPAREN . expression RPAREN statement
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 118
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 69

    (64) for_stmt -> KOULLA LPAREN . expression SEMI expression SEMI expression RPAREN statement
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 119
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 70

    (69) return_stmt -> RJ3 opt_expr . SEMI

    SEMI            shift and go to state 120


state 71

    (65) opt_expr -> expression .

    SEMI            reduce using rule 65 (opt_expr -> expression .)


state 72

    (66) opt_expr -> empty .

    SEMI            reduce using rule 66 (opt_expr -> empty .)


state 73

    (67) break_stmt -> HRASS SEMI .

    TYPE            reduce using rule 67 (break_stmt -> HRASS SEMI .)
    CLASS           reduce using rule 67 (break_stmt -> HRASS SEMI .)
    ILA             reduce using rule 67 (break_stmt -> HRASS SEMI .)
    MNINTCHOUF      reduce using rule 67 (break_stmt -> HRASS SEMI .)
    KOULLA          reduce using rule 67 (break_stmt -> HRASS SEMI .)
    RJ3             reduce using rule 67 (break_stmt -> HRASS SEMI .)
    HRASS           reduce using rule 67 (break_stmt -> HRASS SEMI .)
    KML             reduce using rule 67 (break_stmt -> HRASS SEMI .)
    LBRACE          reduce using rule 67 (break_stmt -> HRASS SEMI .)
    TRY             reduce using rule 67 (break_stmt -> HRASS SEMI .)
    THROW           reduce using rule 67 (break_stmt -> HRASS SEMI .)
    ID              reduce using rule 67 (break_stmt -> HRASS SEMI .)
    MINUS           reduce using rule 67 (break_stmt -> HRASS SEMI .)
    MACHI           reduce using rule 67 (break_stmt -> HRASS SEMI .)
    LPAREN          reduce using rule 67 (break_stmt -> HRASS SEMI .)
    NUMBER          reduce using rule 67 (break_stmt -> HRASS SEMI .)
    STRING          reduce using rule 67 (break_stmt -> HRASS SEMI .)
    BOOL            reduce using rule 67 (break_stmt -> HRASS SEMI .)
    NULL            reduce using rule 67 (break_stmt -> HRASS SEMI .)
    LBRACKET        reduce using rule 67 (break_stmt -> HRASS SEMI .)
    $end            reduce using rule 67 (break_stmt -> HRASS SEMI .)
    RBRACE          reduce using rule 67 (break_stmt -> HRASS SEMI .)
    AWLA            reduce using rule 67 (break_stmt -> HRASS SEMI .)


state 74

    (68) continue_stmt -> KML SEMI .

    TYPE            reduce using rule 68 (continue_stmt -> KML SEMI .)
    CLASS           reduce using rule 68 (continue_stmt -> KML SEMI .)
    ILA             reduce using rule 68 (continue_stmt -> KML SEMI .)
    MNINTCHOUF      reduce using rule 68 (continue_stmt -> KML SEMI .)
    KOULLA          reduce using rule 68 (continue_stmt -> KML SEMI .)
    RJ3             reduce using rule 68 (continue_stmt -> KML SEMI .)
    HRASS           reduce using rule 68 (continue_stmt -> KML SEMI .)
    KML             reduce using rule 68 (continue_stmt -> KML SEMI .)
    LBRACE          reduce using rule 68 (continue_stmt -> KML SEMI .)
    TRY             reduce using rule 68 (continue_stmt -> KML SEMI .)
    THROW           reduce using rule 68 (continue_stmt -> KML SEMI .)
    ID              reduce using rule 68 (continue_stmt -> KML SEMI .)
    MINUS           reduce using rule 68 (continue_stmt -> KML SEMI .)
    MACHI           reduce using rule 68 (continue_stmt -> KML SEMI .)
    LPAREN          reduce using rule 68 (continue_stmt -> KML SEMI .)
    NUMBER          reduce using rule 68 (continue_stmt -> KML SEMI .)
    STRING          reduce using rule 68 (continue_stmt -> KML SEMI .)
    BOOL            reduce using rule 68 (continue_stmt -> KML SEMI .)
    NULL            reduce using rule 68 (continue_stmt -> KML SEMI .)
    LBRACKET        reduce using rule 68 (continue_stmt -> KML SEMI .)
    $end            reduce using rule 68 (continue_stmt -> KML SEMI .)
    RBRACE          reduce using rule 68 (continue_stmt -> KML SEMI .)
    AWLA            reduce using rule 68 (continue_stmt -> KML SEMI .)


state 75

    (93) try_stmt -> TRY compound . catch_clauses
    (94) catch_clauses -> . catch_clause catch_clauses
    (95) catch_clauses -> . catch_clause
    (96) catch_clause -> . CATCH LPAREN EXCEPTION ID RPAREN compound

    CATCH           shift and go to state 123

    catch_clauses                  shift and go to state 121
    catch_clause                   shift and go to state 122

state 76

    (17) compound -> LBRACE . stmt_list RBRACE
    (18) stmt_list -> . statement stmt_list
    (19) stmt_list -> . empty
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (98) empty -> .
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    RBRACE          reduce using rule 98 (empty -> .)
    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    stmt_list                      shift and go to state 53
    statement                      shift and go to state 55
    empty                          shift and go to state 111
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    expression                     shift and go to state 24
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 77

    (97) throw_stmt -> THROW expression . SEMI

    SEMI            shift and go to state 124


state 78

    (40) binary_expr -> binary_expr PLUS . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 125
    func_call                      shift and go to state 50

state 79

    (41) binary_expr -> binary_expr MINUS . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 126
    func_call                      shift and go to state 50

state 80

    (42) binary_expr -> binary_expr TIMES . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 127
    func_call                      shift and go to state 50

state 81

    (43) binary_expr -> binary_expr DIVIDE . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 128
    func_call                      shift and go to state 50

state 82

    (44) binary_expr -> binary_expr OU . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 129
    func_call                      shift and go to state 50

state 83

    (45) binary_expr -> binary_expr AWLA_LOGICAL . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 130
    func_call                      shift and go to state 50

state 84

    (46) binary_expr -> binary_expr LT . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 131
    func_call                      shift and go to state 50

state 85

    (47) binary_expr -> binary_expr LE . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 132
    func_call                      shift and go to state 50

state 86

    (48) binary_expr -> binary_expr GT . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 133
    func_call                      shift and go to state 50

state 87

    (49) binary_expr -> binary_expr GE . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 134
    func_call                      shift and go to state 50

state 88

    (50) binary_expr -> binary_expr EQ . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 135
    func_call                      shift and go to state 50

state 89

    (51) binary_expr -> binary_expr NE . binary_expr
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    ID              shift and go to state 93
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 136
    func_call                      shift and go to state 50

state 90

    (71) binary_expr -> binary_expr LBRACKET . expression RBRACKET
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 37
    expression                     shift and go to state 137
    assignment                     shift and go to state 36
    func_call                      shift and go to state 50

state 91

    (91) binary_expr -> binary_expr DOT . ID
    (92) binary_expr -> binary_expr DOT . ID LPAREN arg_list RPAREN

    ID              shift and go to state 138


state 92

    (52) binary_expr -> MINUS binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    PLUS            reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    MINUS           reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    TIMES           reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    DIVIDE          reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    OU              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    AWLA_LOGICAL    reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    LT              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    LE              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    GT              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    GE              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    EQ              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    NE              reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    LBRACKET        reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    SEMI            reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    RPAREN          reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    COLON           reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    COMMA           reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    RBRACKET        reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    RBRACE          reduce using rule 52 (binary_expr -> MINUS binary_expr .)
    DOT             shift and go to state 91

  ! DOT             [ reduce using rule 52 (binary_expr -> MINUS binary_expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 93

    (59) binary_expr -> ID .
    (12) func_call -> ID . LPAREN arg_list RPAREN

    PLUS            reduce using rule 59 (binary_expr -> ID .)
    MINUS           reduce using rule 59 (binary_expr -> ID .)
    TIMES           reduce using rule 59 (binary_expr -> ID .)
    DIVIDE          reduce using rule 59 (binary_expr -> ID .)
    OU              reduce using rule 59 (binary_expr -> ID .)
    AWLA_LOGICAL    reduce using rule 59 (binary_expr -> ID .)
    LT              reduce using rule 59 (binary_expr -> ID .)
    LE              reduce using rule 59 (binary_expr -> ID .)
    GT              reduce using rule 59 (binary_expr -> ID .)
    GE              reduce using rule 59 (binary_expr -> ID .)
    EQ              reduce using rule 59 (binary_expr -> ID .)
    NE              reduce using rule 59 (binary_expr -> ID .)
    LBRACKET        reduce using rule 59 (binary_expr -> ID .)
    DOT             reduce using rule 59 (binary_expr -> ID .)
    SEMI            reduce using rule 59 (binary_expr -> ID .)
    RPAREN          reduce using rule 59 (binary_expr -> ID .)
    COLON           reduce using rule 59 (binary_expr -> ID .)
    COMMA           reduce using rule 59 (binary_expr -> ID .)
    RBRACKET        reduce using rule 59 (binary_expr -> ID .)
    RBRACE          reduce using rule 59 (binary_expr -> ID .)
    LPAREN          shift and go to state 45


state 94

    (53) binary_expr -> MACHI binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    PLUS            reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    MINUS           reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    TIMES           reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    DIVIDE          reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    OU              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    AWLA_LOGICAL    reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    LT              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    LE              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    GT              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    GE              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    EQ              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    NE              reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    LBRACKET        reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    SEMI            reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    RPAREN          reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    COLON           reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    COMMA           reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    RBRACKET        reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    RBRACE          reduce using rule 53 (binary_expr -> MACHI binary_expr .)
    DOT             shift and go to state 91

  ! DOT             [ reduce using rule 53 (binary_expr -> MACHI binary_expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 95

    (7) function_def -> TYPE ID LPAREN . param_list RPAREN compound
    (8) param_list -> . param_list_nonempty
    (9) param_list -> . empty
    (10) param_list_nonempty -> . TYPE ID
    (11) param_list_nonempty -> . TYPE ID COMMA param_list_nonempty
    (98) empty -> .

    TYPE            shift and go to state 139
    RPAREN          reduce using rule 98 (empty -> .)

    param_list                     shift and go to state 140
    param_list_nonempty            shift and go to state 141
    empty                          shift and go to state 142

state 96

    (31) declaration_stmt -> TYPE ID SEMI .

    TYPE            reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    CLASS           reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    ILA             reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    MNINTCHOUF      reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    KOULLA          reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    RJ3             reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    HRASS           reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    KML             reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    LBRACE          reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    TRY             reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    THROW           reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    ID              reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    MINUS           reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    MACHI           reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    LPAREN          reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    NUMBER          reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    STRING          reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    BOOL            reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    NULL            reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    LBRACKET        reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    $end            reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    RBRACE          reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)
    AWLA            reduce using rule 31 (declaration_stmt -> TYPE ID SEMI .)


state 97

    (32) declaration_stmt -> TYPE ID ASSIGN . expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 143
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 98

    (33) declaration_stmt -> TYPE ID LBRACKET . NUMBER RBRACKET SEMI

    NUMBER          shift and go to state 144


state 99

    (12) func_call -> ID LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 145


state 100

    (38) assignment -> ID ASSIGN expression .

    SEMI            reduce using rule 38 (assignment -> ID ASSIGN expression .)
    RPAREN          reduce using rule 38 (assignment -> ID ASSIGN expression .)
    COLON           reduce using rule 38 (assignment -> ID ASSIGN expression .)
    COMMA           reduce using rule 38 (assignment -> ID ASSIGN expression .)
    RBRACKET        reduce using rule 38 (assignment -> ID ASSIGN expression .)
    RBRACE          reduce using rule 38 (assignment -> ID ASSIGN expression .)


state 101

    (39) assignment -> ID LBRACKET expression . RBRACKET ASSIGN expression

    RBRACKET        shift and go to state 146


state 102

    (54) binary_expr -> LPAREN expression RPAREN .

    PLUS            reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    OU              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    AWLA_LOGICAL    reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    LT              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    LE              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    GT              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    GE              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    EQ              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    NE              reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    DOT             reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    COLON           reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 54 (binary_expr -> LPAREN expression RPAREN .)


state 103

    (74) dict_items -> empty .

    RBRACE          reduce using rule 74 (dict_items -> empty .)


state 104

    (77) dict_item -> expression . COLON expression

    COLON           shift and go to state 114


state 105

    (78) class_def -> CLASS ID class_inheritance . LBRACE class_body RBRACE

    LBRACE          shift and go to state 147


state 106

    (79) class_inheritance -> EXTENDS . ID

    ID              shift and go to state 148


state 107

    (80) class_inheritance -> empty .

    LBRACE          reduce using rule 80 (class_inheritance -> empty .)


state 108

    (17) compound -> LBRACE stmt_list RBRACE .

    TYPE            reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    CLASS           reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    ILA             reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    MNINTCHOUF      reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    KOULLA          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    RJ3             reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    HRASS           reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    KML             reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    LBRACE          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    TRY             reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    THROW           reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    ID              reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    MACHI           reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    BOOL            reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    NULL            reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    $end            reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    CATCH           reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    AWLA            reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    PUBLIC          reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)
    PRIVATE         reduce using rule 17 (compound -> LBRACE stmt_list RBRACE .)


state 109

    (72) binary_expr -> LBRACE dict_items RBRACE .

    PLUS            reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    MINUS           reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    TIMES           reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    DIVIDE          reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    OU              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    AWLA_LOGICAL    reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    LT              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    LE              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    GT              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    GE              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    EQ              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    NE              reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    LBRACKET        reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    DOT             reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    SEMI            reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    RPAREN          reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    COLON           reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    COMMA           reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    RBRACKET        reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)
    RBRACE          reduce using rule 72 (binary_expr -> LBRACE dict_items RBRACE .)


state 110

    (18) stmt_list -> statement stmt_list .

    RBRACE          reduce using rule 18 (stmt_list -> statement stmt_list .)


state 111

    (19) stmt_list -> empty .

    RBRACE          reduce using rule 19 (stmt_list -> empty .)


state 112

    (76) dict_item_list -> dict_item COMMA . dict_item_list
    (75) dict_item_list -> . dict_item
    (76) dict_item_list -> . dict_item COMMA dict_item_list
    (77) dict_item -> . expression COLON expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    dict_item                      shift and go to state 58
    dict_item_list                 shift and go to state 149
    expression                     shift and go to state 104
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 113

    (31) declaration_stmt -> TYPE ID . SEMI
    (32) declaration_stmt -> TYPE ID . ASSIGN expression SEMI
    (33) declaration_stmt -> TYPE ID . LBRACKET NUMBER RBRACKET SEMI

    SEMI            shift and go to state 96
    ASSIGN          shift and go to state 97
    LBRACKET        shift and go to state 98


state 114

    (77) dict_item -> expression COLON . expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 150
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 115

    (70) binary_expr -> LBRACKET arg_list RBRACKET .

    PLUS            reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    MINUS           reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    TIMES           reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    DIVIDE          reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    OU              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    AWLA_LOGICAL    reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    LT              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    LE              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    GT              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    GE              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    EQ              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    NE              reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    LBRACKET        reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    DOT             reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    SEMI            reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    RPAREN          reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    COLON           reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    COMMA           reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    RBRACKET        reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)
    RBRACE          reduce using rule 70 (binary_expr -> LBRACKET arg_list RBRACKET .)


state 116

    (16) arg_list_nonempty -> expression COMMA . arg_list_nonempty
    (15) arg_list_nonempty -> . expression
    (16) arg_list_nonempty -> . expression COMMA arg_list_nonempty
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 65
    arg_list_nonempty              shift and go to state 151
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 117

    (61) if_stmt -> ILA LPAREN expression . RPAREN statement AWLA statement
    (62) if_stmt -> ILA LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 152


state 118

    (63) while_stmt -> MNINTCHOUF LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 153


state 119

    (64) for_stmt -> KOULLA LPAREN expression . SEMI expression SEMI expression RPAREN statement

    SEMI            shift and go to state 154


state 120

    (69) return_stmt -> RJ3 opt_expr SEMI .

    TYPE            reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    CLASS           reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    ILA             reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    MNINTCHOUF      reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    KOULLA          reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    RJ3             reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    HRASS           reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    KML             reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    LBRACE          reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    TRY             reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    THROW           reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    ID              reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    MINUS           reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    MACHI           reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    LPAREN          reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    NUMBER          reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    STRING          reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    BOOL            reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    NULL            reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    LBRACKET        reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    $end            reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    RBRACE          reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)
    AWLA            reduce using rule 69 (return_stmt -> RJ3 opt_expr SEMI .)


state 121

    (93) try_stmt -> TRY compound catch_clauses .

    TYPE            reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    CLASS           reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    ILA             reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    MNINTCHOUF      reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    KOULLA          reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    RJ3             reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    HRASS           reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    KML             reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    LBRACE          reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    TRY             reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    THROW           reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    ID              reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    MINUS           reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    MACHI           reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    LPAREN          reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    NUMBER          reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    STRING          reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    BOOL            reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    NULL            reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    LBRACKET        reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    $end            reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    RBRACE          reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)
    AWLA            reduce using rule 93 (try_stmt -> TRY compound catch_clauses .)


state 122

    (94) catch_clauses -> catch_clause . catch_clauses
    (95) catch_clauses -> catch_clause .
    (94) catch_clauses -> . catch_clause catch_clauses
    (95) catch_clauses -> . catch_clause
    (96) catch_clause -> . CATCH LPAREN EXCEPTION ID RPAREN compound

    TYPE            reduce using rule 95 (catch_clauses -> catch_clause .)
    CLASS           reduce using rule 95 (catch_clauses -> catch_clause .)
    ILA             reduce using rule 95 (catch_clauses -> catch_clause .)
    MNINTCHOUF      reduce using rule 95 (catch_clauses -> catch_clause .)
    KOULLA          reduce using rule 95 (catch_clauses -> catch_clause .)
    RJ3             reduce using rule 95 (catch_clauses -> catch_clause .)
    HRASS           reduce using rule 95 (catch_clauses -> catch_clause .)
    KML             reduce using rule 95 (catch_clauses -> catch_clause .)
    LBRACE          reduce using rule 95 (catch_clauses -> catch_clause .)
    TRY             reduce using rule 95 (catch_clauses -> catch_clause .)
    THROW           reduce using rule 95 (catch_clauses -> catch_clause .)
    ID              reduce using rule 95 (catch_clauses -> catch_clause .)
    MINUS           reduce using rule 95 (catch_clauses -> catch_clause .)
    MACHI           reduce using rule 95 (catch_clauses -> catch_clause .)
    LPAREN          reduce using rule 95 (catch_clauses -> catch_clause .)
    NUMBER          reduce using rule 95 (catch_clauses -> catch_clause .)
    STRING          reduce using rule 95 (catch_clauses -> catch_clause .)
    BOOL            reduce using rule 95 (catch_clauses -> catch_clause .)
    NULL            reduce using rule 95 (catch_clauses -> catch_clause .)
    LBRACKET        reduce using rule 95 (catch_clauses -> catch_clause .)
    $end            reduce using rule 95 (catch_clauses -> catch_clause .)
    RBRACE          reduce using rule 95 (catch_clauses -> catch_clause .)
    AWLA            reduce using rule 95 (catch_clauses -> catch_clause .)
    CATCH           shift and go to state 123

    catch_clause                   shift and go to state 122
    catch_clauses                  shift and go to state 155

state 123

    (96) catch_clause -> CATCH . LPAREN EXCEPTION ID RPAREN compound

    LPAREN          shift and go to state 156


state 124

    (97) throw_stmt -> THROW expression SEMI .

    TYPE            reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    CLASS           reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    ILA             reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    MNINTCHOUF      reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    KOULLA          reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    RJ3             reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    HRASS           reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    KML             reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    LBRACE          reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    TRY             reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    THROW           reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    ID              reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    MINUS           reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    MACHI           reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    LPAREN          reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    NUMBER          reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    STRING          reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    BOOL            reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    NULL            reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    LBRACKET        reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    $end            reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    RBRACE          reduce using rule 97 (throw_stmt -> THROW expression SEMI .)
    AWLA            reduce using rule 97 (throw_stmt -> THROW expression SEMI .)


state 125

    (40) binary_expr -> binary_expr PLUS binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    PLUS            reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    MINUS           reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    OU              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    AWLA_LOGICAL    reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    LT              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    LE              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    GT              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    GE              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    EQ              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    NE              reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    LBRACKET        reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    SEMI            reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    RPAREN          reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    COLON           reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    COMMA           reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    RBRACKET        reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    RBRACE          reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    DOT             shift and go to state 91

  ! TIMES           [ reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .) ]
  ! DIVIDE          [ reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .) ]
  ! DOT             [ reduce using rule 40 (binary_expr -> binary_expr PLUS binary_expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 126

    (41) binary_expr -> binary_expr MINUS binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    PLUS            reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    MINUS           reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    OU              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    AWLA_LOGICAL    reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    LT              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    LE              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    GT              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    GE              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    EQ              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    NE              reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    LBRACKET        reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    SEMI            reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    RPAREN          reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    COLON           reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    COMMA           reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    RBRACKET        reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    RBRACE          reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    DOT             shift and go to state 91

  ! TIMES           [ reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .) ]
  ! DIVIDE          [ reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .) ]
  ! DOT             [ reduce using rule 41 (binary_expr -> binary_expr MINUS binary_expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 127

    (42) binary_expr -> binary_expr TIMES binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    PLUS            reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    MINUS           reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    TIMES           reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    DIVIDE          reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    OU              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    AWLA_LOGICAL    reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    LT              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    LE              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    GT              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    GE              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    EQ              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    NE              reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    LBRACKET        reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    SEMI            reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    RPAREN          reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    COLON           reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    COMMA           reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    RBRACKET        reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    RBRACE          reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .)
    DOT             shift and go to state 91

  ! DOT             [ reduce using rule 42 (binary_expr -> binary_expr TIMES binary_expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 128

    (43) binary_expr -> binary_expr DIVIDE binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    PLUS            reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    MINUS           reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    TIMES           reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    DIVIDE          reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    OU              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    AWLA_LOGICAL    reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    LT              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    LE              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    GT              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    GE              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    EQ              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    NE              reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    LBRACKET        reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    SEMI            reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    RPAREN          reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    COLON           reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    COMMA           reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    RBRACKET        reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    RBRACE          reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .)
    DOT             shift and go to state 91

  ! DOT             [ reduce using rule 43 (binary_expr -> binary_expr DIVIDE binary_expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 80 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 129

    (44) binary_expr -> binary_expr OU binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    AWLA_LOGICAL    reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    LBRACKET        reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    SEMI            reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    RPAREN          reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    COLON           reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    COMMA           reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    RBRACKET        reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    RBRACE          reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! MINUS           [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! TIMES           [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! DIVIDE          [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! LT              [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! LE              [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! GT              [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! GE              [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! EQ              [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! NE              [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! DOT             [ reduce using rule 44 (binary_expr -> binary_expr OU binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 130

    (45) binary_expr -> binary_expr AWLA_LOGICAL binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    AWLA_LOGICAL    reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    LBRACKET        reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    SEMI            reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    RPAREN          reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    COLON           reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    COMMA           reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    RBRACKET        reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    RBRACE          reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    OU              shift and go to state 82
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NE              shift and go to state 89
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! MINUS           [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! TIMES           [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! DIVIDE          [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! OU              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! LT              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! LE              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! GT              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! GE              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! EQ              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! NE              [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! DOT             [ reduce using rule 45 (binary_expr -> binary_expr AWLA_LOGICAL binary_expr .) ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 131

    (46) binary_expr -> binary_expr LT binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    AWLA_LOGICAL    reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    LT              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    LE              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    GT              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    GE              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    EQ              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    NE              reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    LBRACKET        reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    SEMI            reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    RPAREN          reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    COLON           reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    COMMA           reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    RBRACKET        reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    RBRACE          reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .) ]
  ! MINUS           [ reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .) ]
  ! TIMES           [ reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .) ]
  ! DIVIDE          [ reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .) ]
  ! DOT             [ reduce using rule 46 (binary_expr -> binary_expr LT binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 132

    (47) binary_expr -> binary_expr LE binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    AWLA_LOGICAL    reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    LT              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    LE              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    GT              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    GE              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    EQ              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    NE              reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    LBRACKET        reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    SEMI            reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    RPAREN          reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    COLON           reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    COMMA           reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    RBRACKET        reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    RBRACE          reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .) ]
  ! MINUS           [ reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .) ]
  ! TIMES           [ reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .) ]
  ! DIVIDE          [ reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .) ]
  ! DOT             [ reduce using rule 47 (binary_expr -> binary_expr LE binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 133

    (48) binary_expr -> binary_expr GT binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    AWLA_LOGICAL    reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    LT              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    LE              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    GT              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    GE              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    EQ              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    NE              reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    LBRACKET        reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    SEMI            reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    RPAREN          reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    COLON           reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    COMMA           reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    RBRACKET        reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    RBRACE          reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .) ]
  ! MINUS           [ reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .) ]
  ! TIMES           [ reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .) ]
  ! DIVIDE          [ reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .) ]
  ! DOT             [ reduce using rule 48 (binary_expr -> binary_expr GT binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 134

    (49) binary_expr -> binary_expr GE binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    AWLA_LOGICAL    reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    LT              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    LE              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    GT              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    GE              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    EQ              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    NE              reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    LBRACKET        reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    SEMI            reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    RPAREN          reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    COLON           reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    COMMA           reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    RBRACKET        reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    RBRACE          reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .) ]
  ! MINUS           [ reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .) ]
  ! TIMES           [ reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .) ]
  ! DIVIDE          [ reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .) ]
  ! DOT             [ reduce using rule 49 (binary_expr -> binary_expr GE binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 135

    (50) binary_expr -> binary_expr EQ binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    AWLA_LOGICAL    reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    EQ              reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    NE              reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    LBRACKET        reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    SEMI            reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    RPAREN          reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    COLON           reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    COMMA           reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    RBRACKET        reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    RBRACE          reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! MINUS           [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! TIMES           [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! DIVIDE          [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! LT              [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! LE              [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! GT              [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! GE              [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! DOT             [ reduce using rule 50 (binary_expr -> binary_expr EQ binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 136

    (51) binary_expr -> binary_expr NE binary_expr .
    (40) binary_expr -> binary_expr . PLUS binary_expr
    (41) binary_expr -> binary_expr . MINUS binary_expr
    (42) binary_expr -> binary_expr . TIMES binary_expr
    (43) binary_expr -> binary_expr . DIVIDE binary_expr
    (44) binary_expr -> binary_expr . OU binary_expr
    (45) binary_expr -> binary_expr . AWLA_LOGICAL binary_expr
    (46) binary_expr -> binary_expr . LT binary_expr
    (47) binary_expr -> binary_expr . LE binary_expr
    (48) binary_expr -> binary_expr . GT binary_expr
    (49) binary_expr -> binary_expr . GE binary_expr
    (50) binary_expr -> binary_expr . EQ binary_expr
    (51) binary_expr -> binary_expr . NE binary_expr
    (71) binary_expr -> binary_expr . LBRACKET expression RBRACKET
    (91) binary_expr -> binary_expr . DOT ID
    (92) binary_expr -> binary_expr . DOT ID LPAREN arg_list RPAREN

    OU              reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    AWLA_LOGICAL    reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    EQ              reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    NE              reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    LBRACKET        reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    SEMI            reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    RPAREN          reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    COLON           reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    COMMA           reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    RBRACKET        reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    RBRACE          reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! MINUS           [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! TIMES           [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! DIVIDE          [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! LT              [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! LE              [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! GT              [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! GE              [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! DOT             [ reduce using rule 51 (binary_expr -> binary_expr NE binary_expr .) ]
  ! OU              [ shift and go to state 82 ]
  ! AWLA_LOGICAL    [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 88 ]
  ! NE              [ shift and go to state 89 ]
  ! LBRACKET        [ shift and go to state 90 ]


state 137

    (71) binary_expr -> binary_expr LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 157


state 138

    (91) binary_expr -> binary_expr DOT ID .
    (92) binary_expr -> binary_expr DOT ID . LPAREN arg_list RPAREN

    PLUS            reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    MINUS           reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    TIMES           reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    DIVIDE          reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    OU              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    AWLA_LOGICAL    reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    LT              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    LE              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    GT              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    GE              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    EQ              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    NE              reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    LBRACKET        reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    DOT             reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    SEMI            reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    RPAREN          reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    COLON           reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    COMMA           reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    RBRACKET        reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    RBRACE          reduce using rule 91 (binary_expr -> binary_expr DOT ID .)
    LPAREN          shift and go to state 158


state 139

    (10) param_list_nonempty -> TYPE . ID
    (11) param_list_nonempty -> TYPE . ID COMMA param_list_nonempty

    ID              shift and go to state 159


state 140

    (7) function_def -> TYPE ID LPAREN param_list . RPAREN compound

    RPAREN          shift and go to state 160


state 141

    (8) param_list -> param_list_nonempty .

    RPAREN          reduce using rule 8 (param_list -> param_list_nonempty .)


state 142

    (9) param_list -> empty .

    RPAREN          reduce using rule 9 (param_list -> empty .)


state 143

    (32) declaration_stmt -> TYPE ID ASSIGN expression . SEMI

    SEMI            shift and go to state 161


state 144

    (33) declaration_stmt -> TYPE ID LBRACKET NUMBER . RBRACKET SEMI

    RBRACKET        shift and go to state 162


state 145

    (12) func_call -> ID LPAREN arg_list RPAREN .

    SEMI            reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    OU              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    AWLA_LOGICAL    reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    NE              reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    DOT             reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    COLON           reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 12 (func_call -> ID LPAREN arg_list RPAREN .)


state 146

    (39) assignment -> ID LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 163


state 147

    (78) class_def -> CLASS ID class_inheritance LBRACE . class_body RBRACE
    (81) class_body -> . class_member class_body
    (82) class_body -> . empty
    (83) class_member -> . property_decl
    (84) class_member -> . method_decl
    (98) empty -> .
    (85) property_decl -> . access_modifier TYPE ID SEMI
    (86) property_decl -> . access_modifier TYPE ID ASSIGN expression SEMI
    (87) method_decl -> . access_modifier TYPE ID LPAREN param_list RPAREN compound
    (88) access_modifier -> . PUBLIC
    (89) access_modifier -> . PRIVATE
    (90) access_modifier -> . empty

    RBRACE          reduce using rule 98 (empty -> .)
    TYPE            reduce using rule 98 (empty -> .)
    PUBLIC          shift and go to state 170
    PRIVATE         shift and go to state 171

    class_body                     shift and go to state 164
    class_member                   shift and go to state 165
    empty                          shift and go to state 166
    property_decl                  shift and go to state 167
    method_decl                    shift and go to state 168
    access_modifier                shift and go to state 169

state 148

    (79) class_inheritance -> EXTENDS ID .

    LBRACE          reduce using rule 79 (class_inheritance -> EXTENDS ID .)


state 149

    (76) dict_item_list -> dict_item COMMA dict_item_list .

    RBRACE          reduce using rule 76 (dict_item_list -> dict_item COMMA dict_item_list .)


state 150

    (77) dict_item -> expression COLON expression .

    COMMA           reduce using rule 77 (dict_item -> expression COLON expression .)
    RBRACE          reduce using rule 77 (dict_item -> expression COLON expression .)


state 151

    (16) arg_list_nonempty -> expression COMMA arg_list_nonempty .

    RBRACKET        reduce using rule 16 (arg_list_nonempty -> expression COMMA arg_list_nonempty .)
    RPAREN          reduce using rule 16 (arg_list_nonempty -> expression COMMA arg_list_nonempty .)


state 152

    (61) if_stmt -> ILA LPAREN expression RPAREN . statement AWLA statement
    (62) if_stmt -> ILA LPAREN expression RPAREN . statement
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    expression                     shift and go to state 24
    statement                      shift and go to state 172
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 153

    (63) while_stmt -> MNINTCHOUF LPAREN expression RPAREN . statement
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    expression                     shift and go to state 24
    statement                      shift and go to state 173
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 154

    (64) for_stmt -> KOULLA LPAREN expression SEMI . expression SEMI expression RPAREN statement
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 174
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 155

    (94) catch_clauses -> catch_clause catch_clauses .

    TYPE            reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    CLASS           reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    ILA             reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    MNINTCHOUF      reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    KOULLA          reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    RJ3             reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    HRASS           reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    KML             reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    LBRACE          reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    TRY             reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    THROW           reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    ID              reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    MINUS           reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    MACHI           reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    LPAREN          reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    NUMBER          reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    STRING          reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    BOOL            reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    NULL            reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    LBRACKET        reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    $end            reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    RBRACE          reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)
    AWLA            reduce using rule 94 (catch_clauses -> catch_clause catch_clauses .)


state 156

    (96) catch_clause -> CATCH LPAREN . EXCEPTION ID RPAREN compound

    EXCEPTION       shift and go to state 175


state 157

    (71) binary_expr -> binary_expr LBRACKET expression RBRACKET .

    PLUS            reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    OU              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    AWLA_LOGICAL    reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    LT              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    LE              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    GT              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    GE              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    EQ              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    NE              reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    DOT             reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    COLON           reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 71 (binary_expr -> binary_expr LBRACKET expression RBRACKET .)


state 158

    (92) binary_expr -> binary_expr DOT ID LPAREN . arg_list RPAREN
    (13) arg_list -> . arg_list_nonempty
    (14) arg_list -> . empty
    (15) arg_list_nonempty -> . expression
    (16) arg_list_nonempty -> . expression COMMA arg_list_nonempty
    (98) empty -> .
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    RPAREN          reduce using rule 98 (empty -> .)
    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    binary_expr                    shift and go to state 37
    arg_list                       shift and go to state 176
    arg_list_nonempty              shift and go to state 63
    empty                          shift and go to state 64
    expression                     shift and go to state 65
    assignment                     shift and go to state 36
    func_call                      shift and go to state 50

state 159

    (10) param_list_nonempty -> TYPE ID .
    (11) param_list_nonempty -> TYPE ID . COMMA param_list_nonempty

    RPAREN          reduce using rule 10 (param_list_nonempty -> TYPE ID .)
    COMMA           shift and go to state 177


state 160

    (7) function_def -> TYPE ID LPAREN param_list RPAREN . compound
    (17) compound -> . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 76

    compound                       shift and go to state 178

state 161

    (32) declaration_stmt -> TYPE ID ASSIGN expression SEMI .

    TYPE            reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    CLASS           reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    ILA             reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    MNINTCHOUF      reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    KOULLA          reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    RJ3             reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    HRASS           reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    KML             reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    LBRACE          reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    TRY             reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    THROW           reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    ID              reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    MINUS           reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    MACHI           reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    LPAREN          reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    NUMBER          reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    STRING          reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    BOOL            reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    NULL            reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    LBRACKET        reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    $end            reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    RBRACE          reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)
    AWLA            reduce using rule 32 (declaration_stmt -> TYPE ID ASSIGN expression SEMI .)


state 162

    (33) declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET . SEMI

    SEMI            shift and go to state 179


state 163

    (39) assignment -> ID LBRACKET expression RBRACKET ASSIGN . expression
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 180
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 164

    (78) class_def -> CLASS ID class_inheritance LBRACE class_body . RBRACE

    RBRACE          shift and go to state 181


state 165

    (81) class_body -> class_member . class_body
    (81) class_body -> . class_member class_body
    (82) class_body -> . empty
    (83) class_member -> . property_decl
    (84) class_member -> . method_decl
    (98) empty -> .
    (85) property_decl -> . access_modifier TYPE ID SEMI
    (86) property_decl -> . access_modifier TYPE ID ASSIGN expression SEMI
    (87) method_decl -> . access_modifier TYPE ID LPAREN param_list RPAREN compound
    (88) access_modifier -> . PUBLIC
    (89) access_modifier -> . PRIVATE
    (90) access_modifier -> . empty

    RBRACE          reduce using rule 98 (empty -> .)
    TYPE            reduce using rule 98 (empty -> .)
    PUBLIC          shift and go to state 170
    PRIVATE         shift and go to state 171

    class_member                   shift and go to state 165
    class_body                     shift and go to state 182
    empty                          shift and go to state 166
    property_decl                  shift and go to state 167
    method_decl                    shift and go to state 168
    access_modifier                shift and go to state 169

state 166

    (82) class_body -> empty .
    (90) access_modifier -> empty .

    RBRACE          reduce using rule 82 (class_body -> empty .)
    TYPE            reduce using rule 90 (access_modifier -> empty .)


state 167

    (83) class_member -> property_decl .

    PUBLIC          reduce using rule 83 (class_member -> property_decl .)
    PRIVATE         reduce using rule 83 (class_member -> property_decl .)
    TYPE            reduce using rule 83 (class_member -> property_decl .)
    RBRACE          reduce using rule 83 (class_member -> property_decl .)


state 168

    (84) class_member -> method_decl .

    PUBLIC          reduce using rule 84 (class_member -> method_decl .)
    PRIVATE         reduce using rule 84 (class_member -> method_decl .)
    TYPE            reduce using rule 84 (class_member -> method_decl .)
    RBRACE          reduce using rule 84 (class_member -> method_decl .)


state 169

    (85) property_decl -> access_modifier . TYPE ID SEMI
    (86) property_decl -> access_modifier . TYPE ID ASSIGN expression SEMI
    (87) method_decl -> access_modifier . TYPE ID LPAREN param_list RPAREN compound

    TYPE            shift and go to state 183


state 170

    (88) access_modifier -> PUBLIC .

    TYPE            reduce using rule 88 (access_modifier -> PUBLIC .)


state 171

    (89) access_modifier -> PRIVATE .

    TYPE            reduce using rule 89 (access_modifier -> PRIVATE .)


state 172

    (61) if_stmt -> ILA LPAREN expression RPAREN statement . AWLA statement
    (62) if_stmt -> ILA LPAREN expression RPAREN statement .

    AWLA            shift and go to state 184
    TYPE            reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    ILA             reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    MNINTCHOUF      reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    KOULLA          reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    RJ3             reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    HRASS           reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    KML             reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    TRY             reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    THROW           reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    ID              reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    MACHI           reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    STRING          reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    NULL            reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    $end            reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .)

  ! AWLA            [ reduce using rule 62 (if_stmt -> ILA LPAREN expression RPAREN statement .) ]


state 173

    (63) while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .

    TYPE            reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    ILA             reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    MNINTCHOUF      reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    KOULLA          reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    RJ3             reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    HRASS           reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    KML             reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    THROW           reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    ID              reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    MACHI           reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    NULL            reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    $end            reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)
    AWLA            reduce using rule 63 (while_stmt -> MNINTCHOUF LPAREN expression RPAREN statement .)


state 174

    (64) for_stmt -> KOULLA LPAREN expression SEMI expression . SEMI expression RPAREN statement

    SEMI            shift and go to state 185


state 175

    (96) catch_clause -> CATCH LPAREN EXCEPTION . ID RPAREN compound

    ID              shift and go to state 186


state 176

    (92) binary_expr -> binary_expr DOT ID LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 187


state 177

    (11) param_list_nonempty -> TYPE ID COMMA . param_list_nonempty
    (10) param_list_nonempty -> . TYPE ID
    (11) param_list_nonempty -> . TYPE ID COMMA param_list_nonempty

    TYPE            shift and go to state 139

    param_list_nonempty            shift and go to state 188

state 178

    (7) function_def -> TYPE ID LPAREN param_list RPAREN compound .

    TYPE            reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    CLASS           reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    ILA             reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    MNINTCHOUF      reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    KOULLA          reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    RJ3             reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    HRASS           reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    KML             reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    LBRACE          reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    TRY             reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    THROW           reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    ID              reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    MINUS           reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    MACHI           reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    LPAREN          reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    NUMBER          reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    STRING          reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    BOOL            reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    NULL            reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    LBRACKET        reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)
    $end            reduce using rule 7 (function_def -> TYPE ID LPAREN param_list RPAREN compound .)


state 179

    (33) declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .

    TYPE            reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    CLASS           reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    ILA             reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    MNINTCHOUF      reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    KOULLA          reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    RJ3             reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    HRASS           reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    KML             reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    LBRACE          reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    TRY             reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    THROW           reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    ID              reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    MINUS           reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    MACHI           reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    LPAREN          reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    NUMBER          reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    STRING          reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    BOOL            reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    NULL            reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    LBRACKET        reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    $end            reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    RBRACE          reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)
    AWLA            reduce using rule 33 (declaration_stmt -> TYPE ID LBRACKET NUMBER RBRACKET SEMI .)


state 180

    (39) assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .

    SEMI            reduce using rule 39 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    RPAREN          reduce using rule 39 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    COLON           reduce using rule 39 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    COMMA           reduce using rule 39 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    RBRACKET        reduce using rule 39 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)
    RBRACE          reduce using rule 39 (assignment -> ID LBRACKET expression RBRACKET ASSIGN expression .)


state 181

    (78) class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .

    TYPE            reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    CLASS           reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    ILA             reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    MNINTCHOUF      reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    KOULLA          reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    RJ3             reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    HRASS           reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    KML             reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    LBRACE          reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    TRY             reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    THROW           reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    ID              reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    MINUS           reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    MACHI           reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    LPAREN          reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    NUMBER          reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    STRING          reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    BOOL            reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    NULL            reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    LBRACKET        reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)
    $end            reduce using rule 78 (class_def -> CLASS ID class_inheritance LBRACE class_body RBRACE .)


state 182

    (81) class_body -> class_member class_body .

    RBRACE          reduce using rule 81 (class_body -> class_member class_body .)


state 183

    (85) property_decl -> access_modifier TYPE . ID SEMI
    (86) property_decl -> access_modifier TYPE . ID ASSIGN expression SEMI
    (87) method_decl -> access_modifier TYPE . ID LPAREN param_list RPAREN compound

    ID              shift and go to state 189


state 184

    (61) if_stmt -> ILA LPAREN expression RPAREN statement AWLA . statement
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    expression                     shift and go to state 24
    statement                      shift and go to state 190
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 185

    (64) for_stmt -> KOULLA LPAREN expression SEMI expression SEMI . expression RPAREN statement
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 191
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 186

    (96) catch_clause -> CATCH LPAREN EXCEPTION ID . RPAREN compound

    RPAREN          shift and go to state 192


state 187

    (92) binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .

    PLUS            reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    OU              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    AWLA_LOGICAL    reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    LT              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    LE              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    GT              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    GE              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    EQ              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    NE              reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    DOT             reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    SEMI            reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    COLON           reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 92 (binary_expr -> binary_expr DOT ID LPAREN arg_list RPAREN .)


state 188

    (11) param_list_nonempty -> TYPE ID COMMA param_list_nonempty .

    RPAREN          reduce using rule 11 (param_list_nonempty -> TYPE ID COMMA param_list_nonempty .)


state 189

    (85) property_decl -> access_modifier TYPE ID . SEMI
    (86) property_decl -> access_modifier TYPE ID . ASSIGN expression SEMI
    (87) method_decl -> access_modifier TYPE ID . LPAREN param_list RPAREN compound

    SEMI            shift and go to state 193
    ASSIGN          shift and go to state 194
    LPAREN          shift and go to state 195


state 190

    (61) if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .

    TYPE            reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    CLASS           reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    ILA             reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    MNINTCHOUF      reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    KOULLA          reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    RJ3             reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    HRASS           reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    KML             reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    LBRACE          reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    TRY             reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    THROW           reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    ID              reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    MINUS           reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    MACHI           reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    LPAREN          reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    NUMBER          reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    STRING          reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    BOOL            reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    NULL            reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    LBRACKET        reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    $end            reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    RBRACE          reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)
    AWLA            reduce using rule 61 (if_stmt -> ILA LPAREN expression RPAREN statement AWLA statement .)


state 191

    (64) for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression . RPAREN statement

    RPAREN          shift and go to state 196


state 192

    (96) catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN . compound
    (17) compound -> . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 76

    compound                       shift and go to state 197

state 193

    (85) property_decl -> access_modifier TYPE ID SEMI .

    PUBLIC          reduce using rule 85 (property_decl -> access_modifier TYPE ID SEMI .)
    PRIVATE         reduce using rule 85 (property_decl -> access_modifier TYPE ID SEMI .)
    TYPE            reduce using rule 85 (property_decl -> access_modifier TYPE ID SEMI .)
    RBRACE          reduce using rule 85 (property_decl -> access_modifier TYPE ID SEMI .)


state 194

    (86) property_decl -> access_modifier TYPE ID ASSIGN . expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN
    (12) func_call -> . ID LPAREN arg_list RPAREN

    ID              shift and go to state 49
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25
    LBRACE          shift and go to state 51

    expression                     shift and go to state 198
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37
    func_call                      shift and go to state 50

state 195

    (87) method_decl -> access_modifier TYPE ID LPAREN . param_list RPAREN compound
    (8) param_list -> . param_list_nonempty
    (9) param_list -> . empty
    (10) param_list_nonempty -> . TYPE ID
    (11) param_list_nonempty -> . TYPE ID COMMA param_list_nonempty
    (98) empty -> .

    TYPE            shift and go to state 139
    RPAREN          reduce using rule 98 (empty -> .)

    param_list                     shift and go to state 199
    param_list_nonempty            shift and go to state 141
    empty                          shift and go to state 142

state 196

    (64) for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN . statement
    (20) statement -> . declaration_stmt
    (21) statement -> . expression_stmt
    (22) statement -> . if_stmt
    (23) statement -> . while_stmt
    (24) statement -> . for_stmt
    (25) statement -> . return_stmt
    (26) statement -> . break_stmt
    (27) statement -> . continue_stmt
    (28) statement -> . compound
    (29) statement -> . try_stmt
    (30) statement -> . throw_stmt
    (31) declaration_stmt -> . TYPE ID SEMI
    (32) declaration_stmt -> . TYPE ID ASSIGN expression SEMI
    (33) declaration_stmt -> . TYPE ID LBRACKET NUMBER RBRACKET SEMI
    (34) expression_stmt -> . expression SEMI
    (35) expression_stmt -> . func_call SEMI
    (61) if_stmt -> . ILA LPAREN expression RPAREN statement AWLA statement
    (62) if_stmt -> . ILA LPAREN expression RPAREN statement
    (63) while_stmt -> . MNINTCHOUF LPAREN expression RPAREN statement
    (64) for_stmt -> . KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement
    (69) return_stmt -> . RJ3 opt_expr SEMI
    (67) break_stmt -> . HRASS SEMI
    (68) continue_stmt -> . KML SEMI
    (17) compound -> . LBRACE stmt_list RBRACE
    (93) try_stmt -> . TRY compound catch_clauses
    (97) throw_stmt -> . THROW expression SEMI
    (36) expression -> . assignment
    (37) expression -> . binary_expr
    (12) func_call -> . ID LPAREN arg_list RPAREN
    (38) assignment -> . ID ASSIGN expression
    (39) assignment -> . ID LBRACKET expression RBRACKET ASSIGN expression
    (40) binary_expr -> . binary_expr PLUS binary_expr
    (41) binary_expr -> . binary_expr MINUS binary_expr
    (42) binary_expr -> . binary_expr TIMES binary_expr
    (43) binary_expr -> . binary_expr DIVIDE binary_expr
    (44) binary_expr -> . binary_expr OU binary_expr
    (45) binary_expr -> . binary_expr AWLA_LOGICAL binary_expr
    (46) binary_expr -> . binary_expr LT binary_expr
    (47) binary_expr -> . binary_expr LE binary_expr
    (48) binary_expr -> . binary_expr GT binary_expr
    (49) binary_expr -> . binary_expr GE binary_expr
    (50) binary_expr -> . binary_expr EQ binary_expr
    (51) binary_expr -> . binary_expr NE binary_expr
    (52) binary_expr -> . MINUS binary_expr
    (53) binary_expr -> . MACHI binary_expr
    (54) binary_expr -> . LPAREN expression RPAREN
    (55) binary_expr -> . NUMBER
    (56) binary_expr -> . STRING
    (57) binary_expr -> . BOOL
    (58) binary_expr -> . NULL
    (59) binary_expr -> . ID
    (60) binary_expr -> . func_call
    (70) binary_expr -> . LBRACKET arg_list RBRACKET
    (71) binary_expr -> . binary_expr LBRACKET expression RBRACKET
    (72) binary_expr -> . LBRACE dict_items RBRACE
    (91) binary_expr -> . binary_expr DOT ID
    (92) binary_expr -> . binary_expr DOT ID LPAREN arg_list RPAREN

    TYPE            shift and go to state 59
    ILA             shift and go to state 28
    MNINTCHOUF      shift and go to state 29
    KOULLA          shift and go to state 30
    RJ3             shift and go to state 31
    HRASS           shift and go to state 32
    KML             shift and go to state 33
    LBRACE          shift and go to state 23
    TRY             shift and go to state 34
    THROW           shift and go to state 35
    ID              shift and go to state 9
    MINUS           shift and go to state 38
    MACHI           shift and go to state 39
    LPAREN          shift and go to state 10
    NUMBER          shift and go to state 26
    STRING          shift and go to state 40
    BOOL            shift and go to state 41
    NULL            shift and go to state 42
    LBRACKET        shift and go to state 25

    expression                     shift and go to state 24
    statement                      shift and go to state 200
    declaration_stmt               shift and go to state 12
    expression_stmt                shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    continue_stmt                  shift and go to state 19
    compound                       shift and go to state 11
    try_stmt                       shift and go to state 20
    throw_stmt                     shift and go to state 21
    func_call                      shift and go to state 27
    assignment                     shift and go to state 36
    binary_expr                    shift and go to state 37

state 197

    (96) catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .

    CATCH           reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    TYPE            reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    CLASS           reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    ILA             reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    MNINTCHOUF      reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    KOULLA          reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    RJ3             reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    HRASS           reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    KML             reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    LBRACE          reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    TRY             reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    THROW           reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    ID              reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    MINUS           reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    MACHI           reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    LPAREN          reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    NUMBER          reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    STRING          reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    BOOL            reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    NULL            reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    LBRACKET        reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    $end            reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    RBRACE          reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)
    AWLA            reduce using rule 96 (catch_clause -> CATCH LPAREN EXCEPTION ID RPAREN compound .)


state 198

    (86) property_decl -> access_modifier TYPE ID ASSIGN expression . SEMI

    SEMI            shift and go to state 201


state 199

    (87) method_decl -> access_modifier TYPE ID LPAREN param_list . RPAREN compound

    RPAREN          shift and go to state 202


state 200

    (64) for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .

    TYPE            reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    CLASS           reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ILA             reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MNINTCHOUF      reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    KOULLA          reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    RJ3             reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    HRASS           reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    KML             reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    TRY             reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    THROW           reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MACHI           reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    NUMBER          reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    STRING          reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    BOOL            reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    NULL            reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACKET        reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    $end            reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    RBRACE          reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    AWLA            reduce using rule 64 (for_stmt -> KOULLA LPAREN expression SEMI expression SEMI expression RPAREN statement .)


state 201

    (86) property_decl -> access_modifier TYPE ID ASSIGN expression SEMI .

    PUBLIC          reduce using rule 86 (property_decl -> access_modifier TYPE ID ASSIGN expression SEMI .)
    PRIVATE         reduce using rule 86 (property_decl -> access_modifier TYPE ID ASSIGN expression SEMI .)
    TYPE            reduce using rule 86 (property_decl -> access_modifier TYPE ID ASSIGN expression SEMI .)
    RBRACE          reduce using rule 86 (property_decl -> access_modifier TYPE ID ASSIGN expression SEMI .)


state 202

    (87) method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN . compound
    (17) compound -> . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 76

    compound                       shift and go to state 203

state 203

    (87) method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN compound .

    PUBLIC          reduce using rule 87 (method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN compound .)
    PRIVATE         reduce using rule 87 (method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN compound .)
    TYPE            reduce using rule 87 (method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN compound .)
    RBRACE          reduce using rule 87 (method_decl -> access_modifier TYPE ID LPAREN param_list RPAREN compound .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 9 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 27 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 49 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (stmt_list -> empty)
WARNING: rejected rule (dict_items -> empty) in state 56
